
projeteteste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f78  08006f78  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08006f78  08006f78  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f78  08006f78  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f7c  08006f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000164  080070e4  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  080070e4  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f36c  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002667  00000000  00000000  0002f4f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  00032558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000191b8  00000000  00000000  00032e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b576  00000000  00000000  0004bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084aa4  00000000  00000000  00057546  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbfea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000dc068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ef4 	.word	0x08006ef4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08006ef4 	.word	0x08006ef4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9ea 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8b6 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f90c 	bl	8000374 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 fae4 	bl	8006728 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(BOTAOA)
 8000160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000164:	4853      	ldr	r0, [pc, #332]	; (80002b4 <main+0x168>)
 8000166:	f000 fccb 	bl	8000b00 <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d113      	bne.n	8000198 <main+0x4c>
	  {
		  HIDkeyBoard.MODIFIER = 0x02; // Print char in Capital
 8000170:	4b51      	ldr	r3, [pc, #324]	; (80002b8 <main+0x16c>)
 8000172:	2202      	movs	r2, #2
 8000174:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x04; // Print 'A'
 8000176:	4b50      	ldr	r3, [pc, #320]	; (80002b8 <main+0x16c>)
 8000178:	2204      	movs	r2, #4
 800017a:	709a      	strb	r2, [r3, #2]
		  HAL_Delay(50);
 800017c:	2032      	movs	r0, #50	; 0x32
 800017e:	f000 fa35 	bl	80005ec <HAL_Delay>
		  USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000182:	2208      	movs	r2, #8
 8000184:	494c      	ldr	r1, [pc, #304]	; (80002b8 <main+0x16c>)
 8000186:	484d      	ldr	r0, [pc, #308]	; (80002bc <main+0x170>)
 8000188:	f005 f9ec 	bl	8005564 <USBD_HID_SendReport>
		  HIDkeyBoard.MODIFIER = 0x00;// Release Shift
 800018c:	4b4a      	ldr	r3, [pc, #296]	; (80002b8 <main+0x16c>)
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x00;// Release Key
 8000192:	4b49      	ldr	r3, [pc, #292]	; (80002b8 <main+0x16c>)
 8000194:	2200      	movs	r2, #0
 8000196:	709a      	strb	r2, [r3, #2]
	  }

	  if(BOTAOD)
 8000198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019c:	4845      	ldr	r0, [pc, #276]	; (80002b4 <main+0x168>)
 800019e:	f000 fcaf 	bl	8000b00 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d113      	bne.n	80001d0 <main+0x84>
	  {
		  HIDkeyBoard.MODIFIER = 0x02; // Print char in Capital
 80001a8:	4b43      	ldr	r3, [pc, #268]	; (80002b8 <main+0x16c>)
 80001aa:	2202      	movs	r2, #2
 80001ac:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x07; // Print 'D'
 80001ae:	4b42      	ldr	r3, [pc, #264]	; (80002b8 <main+0x16c>)
 80001b0:	2207      	movs	r2, #7
 80001b2:	709a      	strb	r2, [r3, #2]
		  HAL_Delay(50);
 80001b4:	2032      	movs	r0, #50	; 0x32
 80001b6:	f000 fa19 	bl	80005ec <HAL_Delay>
		  USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 80001ba:	2208      	movs	r2, #8
 80001bc:	493e      	ldr	r1, [pc, #248]	; (80002b8 <main+0x16c>)
 80001be:	483f      	ldr	r0, [pc, #252]	; (80002bc <main+0x170>)
 80001c0:	f005 f9d0 	bl	8005564 <USBD_HID_SendReport>
		  HIDkeyBoard.MODIFIER = 0x00;// Release Shift
 80001c4:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <main+0x16c>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x00;// Release Key
 80001ca:	4b3b      	ldr	r3, [pc, #236]	; (80002b8 <main+0x16c>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	709a      	strb	r2, [r3, #2]
	  }

	  if(BOTAOS)
 80001d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d4:	4837      	ldr	r0, [pc, #220]	; (80002b4 <main+0x168>)
 80001d6:	f000 fc93 	bl	8000b00 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d113      	bne.n	8000208 <main+0xbc>
	  {
		  HIDkeyBoard.MODIFIER = 0x02; // Print char in Capital
 80001e0:	4b35      	ldr	r3, [pc, #212]	; (80002b8 <main+0x16c>)
 80001e2:	2202      	movs	r2, #2
 80001e4:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x16; // Print 'S'
 80001e6:	4b34      	ldr	r3, [pc, #208]	; (80002b8 <main+0x16c>)
 80001e8:	2216      	movs	r2, #22
 80001ea:	709a      	strb	r2, [r3, #2]
		  HAL_Delay(50);
 80001ec:	2032      	movs	r0, #50	; 0x32
 80001ee:	f000 f9fd 	bl	80005ec <HAL_Delay>
		  USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 80001f2:	2208      	movs	r2, #8
 80001f4:	4930      	ldr	r1, [pc, #192]	; (80002b8 <main+0x16c>)
 80001f6:	4831      	ldr	r0, [pc, #196]	; (80002bc <main+0x170>)
 80001f8:	f005 f9b4 	bl	8005564 <USBD_HID_SendReport>
		  HIDkeyBoard.MODIFIER = 0x00;// Release Shift
 80001fc:	4b2e      	ldr	r3, [pc, #184]	; (80002b8 <main+0x16c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x00;// Release Key
 8000202:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <main+0x16c>)
 8000204:	2200      	movs	r2, #0
 8000206:	709a      	strb	r2, [r3, #2]
	  }

	  if(BOTAOW)
 8000208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800020c:	482c      	ldr	r0, [pc, #176]	; (80002c0 <main+0x174>)
 800020e:	f000 fc77 	bl	8000b00 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d113      	bne.n	8000240 <main+0xf4>
	  {
		  HIDkeyBoard.MODIFIER = 0x02; // Print char in Capital
 8000218:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <main+0x16c>)
 800021a:	2202      	movs	r2, #2
 800021c:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x1A; // Print 'W'
 800021e:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <main+0x16c>)
 8000220:	221a      	movs	r2, #26
 8000222:	709a      	strb	r2, [r3, #2]
		  HAL_Delay(50);
 8000224:	2032      	movs	r0, #50	; 0x32
 8000226:	f000 f9e1 	bl	80005ec <HAL_Delay>
		  USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 800022a:	2208      	movs	r2, #8
 800022c:	4922      	ldr	r1, [pc, #136]	; (80002b8 <main+0x16c>)
 800022e:	4823      	ldr	r0, [pc, #140]	; (80002bc <main+0x170>)
 8000230:	f005 f998 	bl	8005564 <USBD_HID_SendReport>
		  HIDkeyBoard.MODIFIER = 0x00;// Release Shift
 8000234:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <main+0x16c>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x00;// Release Key
 800023a:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <main+0x16c>)
 800023c:	2200      	movs	r2, #0
 800023e:	709a      	strb	r2, [r3, #2]
	  }

	  if(BOTAOE)
 8000240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000244:	481e      	ldr	r0, [pc, #120]	; (80002c0 <main+0x174>)
 8000246:	f000 fc5b 	bl	8000b00 <HAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d113      	bne.n	8000278 <main+0x12c>
	  {
		  HIDkeyBoard.MODIFIER = 0x02; // Print char in Capital
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0x16c>)
 8000252:	2202      	movs	r2, #2
 8000254:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x08; // Print 'E'
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <main+0x16c>)
 8000258:	2208      	movs	r2, #8
 800025a:	709a      	strb	r2, [r3, #2]
		  HAL_Delay(50);
 800025c:	2032      	movs	r0, #50	; 0x32
 800025e:	f000 f9c5 	bl	80005ec <HAL_Delay>
		  USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000262:	2208      	movs	r2, #8
 8000264:	4914      	ldr	r1, [pc, #80]	; (80002b8 <main+0x16c>)
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <main+0x170>)
 8000268:	f005 f97c 	bl	8005564 <USBD_HID_SendReport>
		  HIDkeyBoard.MODIFIER = 0x00;// Release Shift
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <main+0x16c>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x00;// Release Key
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <main+0x16c>)
 8000274:	2200      	movs	r2, #0
 8000276:	709a      	strb	r2, [r3, #2]
	  }
	  if(BOTAOQ)
 8000278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027c:	4810      	ldr	r0, [pc, #64]	; (80002c0 <main+0x174>)
 800027e:	f000 fc3f 	bl	8000b00 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	f47f af6b 	bne.w	8000160 <main+0x14>
	  {
		  HIDkeyBoard.MODIFIER = 0x02; // Print char in Capital
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <main+0x16c>)
 800028c:	2202      	movs	r2, #2
 800028e:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x14; // Print 'Q'
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <main+0x16c>)
 8000292:	2214      	movs	r2, #20
 8000294:	709a      	strb	r2, [r3, #2]
		  HAL_Delay(50);
 8000296:	2032      	movs	r0, #50	; 0x32
 8000298:	f000 f9a8 	bl	80005ec <HAL_Delay>
		  USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 800029c:	2208      	movs	r2, #8
 800029e:	4906      	ldr	r1, [pc, #24]	; (80002b8 <main+0x16c>)
 80002a0:	4806      	ldr	r0, [pc, #24]	; (80002bc <main+0x170>)
 80002a2:	f005 f95f 	bl	8005564 <USBD_HID_SendReport>
		  HIDkeyBoard.MODIFIER = 0x00;// Release Shift
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <main+0x16c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
		  HIDkeyBoard.KEYCODE1 = 0x00;// Release Key
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <main+0x16c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	709a      	strb	r2, [r3, #2]
	  if(BOTAOA)
 80002b2:	e755      	b.n	8000160 <main+0x14>
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000180 	.word	0x20000180
 80002bc:	200001a4 	.word	0x200001a4
 80002c0:	40010c00 	.word	0x40010c00

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b094      	sub	sp, #80	; 0x50
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f006 fe06 	bl	8006ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 0314 	add.w	r3, r7, #20
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2310      	movs	r3, #16
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000304:	2300      	movs	r3, #0
 8000306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000308:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800030c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f8b6 	bl	8002484 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800031e:	f000 f86f 	bl	8000400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2101      	movs	r1, #1
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fb20 	bl	8002984 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800034a:	f000 f859 	bl	8000400 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034e:	2310      	movs	r3, #16
 8000350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000356:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fc7c 	bl	8002c58 <HAL_RCCEx_PeriphCLKConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000366:	f000 f84b 	bl	8000400 <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3750      	adds	r7, #80	; 0x50
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_GPIO_Init+0x80>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <MX_GPIO_Init+0x80>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_GPIO_Init+0x80>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_GPIO_Init+0x80>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <MX_GPIO_Init+0x80>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_GPIO_Init+0x80>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80003b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80003bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	4619      	mov	r1, r3
 80003cc:	480a      	ldr	r0, [pc, #40]	; (80003f8 <MX_GPIO_Init+0x84>)
 80003ce:	f000 fa3d 	bl	800084c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80003d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80003d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003dc:	2301      	movs	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_GPIO_Init+0x88>)
 80003e8:	f000 fa30 	bl	800084c <HAL_GPIO_Init>

}
 80003ec:	bf00      	nop
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010c00 	.word	0x40010c00
 80003fc:	40010800 	.word	0x40010800

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000406:	e7fe      	b.n	8000406 <Error_Handler+0x6>

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a14      	ldr	r2, [pc, #80]	; (8000464 <HAL_MspInit+0x5c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <HAL_MspInit+0x5c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <HAL_MspInit+0x5c>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <HAL_MspInit+0x5c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_MspInit+0x60>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <HAL_MspInit+0x60>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000
 8000468:	40010000 	.word	0x40010000

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <NMI_Handler+0x4>

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <MemManage_Handler+0x4>

0800047e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <UsageFault_Handler+0x4>

0800048a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 f87f 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004c2:	f000 fc65 	bl	8000d90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000668 	.word	0x20000668

080004d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000502:	f7ff ffe5 	bl	80004d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f006 fcc9 	bl	8006e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff fe1f 	bl	800014c <main>
  bx lr
 800050e:	4770      	bx	lr
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000518:	08006f80 	.word	0x08006f80
  ldr r2, =_sbss
 800051c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000520:	20000954 	.word	0x20000954

08000524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_2_IRQHandler>
	...

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x28>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f945 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f7ff ff60 	bl	8000408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40022000 	.word	0x40022000

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f95d 	bl	8000832 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f925 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004

080005b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x1c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x20>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x20>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000008 	.word	0x20000008
 80005d4:	200001a0 	.word	0x200001a0

080005d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <HAL_GetTick+0x10>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	200001a0 	.word	0x200001a0

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff fff0 	bl	80005d8 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_Delay+0x40>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffe0 	bl	80005d8 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000008 	.word	0x20000008

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <__NVIC_EnableIRQ+0x34>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff90 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff2d 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff42 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff90 	bl	8000720 <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5f 	bl	80006cc <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff35 	bl	8000694 <__NVIC_EnableIRQ>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffa2 	bl	8000784 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	b480      	push	{r7}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e127      	b.n	8000ab0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000860:	2201      	movs	r2, #1
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	429a      	cmp	r2, r3
 800087a:	f040 8116 	bne.w	8000aaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b12      	cmp	r3, #18
 8000884:	d034      	beq.n	80008f0 <HAL_GPIO_Init+0xa4>
 8000886:	2b12      	cmp	r3, #18
 8000888:	d80d      	bhi.n	80008a6 <HAL_GPIO_Init+0x5a>
 800088a:	2b02      	cmp	r3, #2
 800088c:	d02b      	beq.n	80008e6 <HAL_GPIO_Init+0x9a>
 800088e:	2b02      	cmp	r3, #2
 8000890:	d804      	bhi.n	800089c <HAL_GPIO_Init+0x50>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d031      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 8000896:	2b01      	cmp	r3, #1
 8000898:	d01c      	beq.n	80008d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800089a:	e048      	b.n	800092e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800089c:	2b03      	cmp	r3, #3
 800089e:	d043      	beq.n	8000928 <HAL_GPIO_Init+0xdc>
 80008a0:	2b11      	cmp	r3, #17
 80008a2:	d01b      	beq.n	80008dc <HAL_GPIO_Init+0x90>
          break;
 80008a4:	e043      	b.n	800092e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008a6:	4a89      	ldr	r2, [pc, #548]	; (8000acc <HAL_GPIO_Init+0x280>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d026      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008ac:	4a87      	ldr	r2, [pc, #540]	; (8000acc <HAL_GPIO_Init+0x280>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d806      	bhi.n	80008c0 <HAL_GPIO_Init+0x74>
 80008b2:	4a87      	ldr	r2, [pc, #540]	; (8000ad0 <HAL_GPIO_Init+0x284>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d020      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008b8:	4a86      	ldr	r2, [pc, #536]	; (8000ad4 <HAL_GPIO_Init+0x288>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d01d      	beq.n	80008fa <HAL_GPIO_Init+0xae>
          break;
 80008be:	e036      	b.n	800092e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008c0:	4a85      	ldr	r2, [pc, #532]	; (8000ad8 <HAL_GPIO_Init+0x28c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d019      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008c6:	4a85      	ldr	r2, [pc, #532]	; (8000adc <HAL_GPIO_Init+0x290>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d016      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008cc:	4a84      	ldr	r2, [pc, #528]	; (8000ae0 <HAL_GPIO_Init+0x294>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d013      	beq.n	80008fa <HAL_GPIO_Init+0xae>
          break;
 80008d2:	e02c      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	623b      	str	r3, [r7, #32]
          break;
 80008da:	e028      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	3304      	adds	r3, #4
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e023      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	3308      	adds	r3, #8
 80008ec:	623b      	str	r3, [r7, #32]
          break;
 80008ee:	e01e      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	330c      	adds	r3, #12
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	e019      	b.n	800092e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000902:	2304      	movs	r3, #4
 8000904:	623b      	str	r3, [r7, #32]
          break;
 8000906:	e012      	b.n	800092e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d105      	bne.n	800091c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000910:	2308      	movs	r3, #8
 8000912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	611a      	str	r2, [r3, #16]
          break;
 800091a:	e008      	b.n	800092e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800091c:	2308      	movs	r3, #8
 800091e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	615a      	str	r2, [r3, #20]
          break;
 8000926:	e002      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
          break;
 800092c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	2bff      	cmp	r3, #255	; 0xff
 8000932:	d801      	bhi.n	8000938 <HAL_GPIO_Init+0xec>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	e001      	b.n	800093c <HAL_GPIO_Init+0xf0>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3304      	adds	r3, #4
 800093c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	2bff      	cmp	r3, #255	; 0xff
 8000942:	d802      	bhi.n	800094a <HAL_GPIO_Init+0xfe>
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	e002      	b.n	8000950 <HAL_GPIO_Init+0x104>
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	3b08      	subs	r3, #8
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	210f      	movs	r1, #15
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	401a      	ands	r2, r3
 8000962:	6a39      	ldr	r1, [r7, #32]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	431a      	orrs	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 8096 	beq.w	8000aaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <HAL_GPIO_Init+0x298>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a58      	ldr	r2, [pc, #352]	; (8000ae4 <HAL_GPIO_Init+0x298>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <HAL_GPIO_Init+0x298>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000996:	4a54      	ldr	r2, [pc, #336]	; (8000ae8 <HAL_GPIO_Init+0x29c>)
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	4013      	ands	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4b      	ldr	r2, [pc, #300]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d013      	beq.n	80009ea <HAL_GPIO_Init+0x19e>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d00d      	beq.n	80009e6 <HAL_GPIO_Init+0x19a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a49      	ldr	r2, [pc, #292]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d007      	beq.n	80009e2 <HAL_GPIO_Init+0x196>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a48      	ldr	r2, [pc, #288]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_GPIO_Init+0x192>
 80009da:	2303      	movs	r3, #3
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009de:	2304      	movs	r3, #4
 80009e0:	e004      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009e2:	2302      	movs	r3, #2
 80009e4:	e002      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009ea:	2300      	movs	r3, #0
 80009ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ee:	f002 0203 	and.w	r2, r2, #3
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	4093      	lsls	r3, r2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009fc:	493a      	ldr	r1, [pc, #232]	; (8000ae8 <HAL_GPIO_Init+0x29c>)
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a16:	4b39      	ldr	r3, [pc, #228]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4938      	ldr	r1, [pc, #224]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]
 8000a22:	e006      	b.n	8000a32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	4933      	ldr	r1, [pc, #204]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	492e      	ldr	r1, [pc, #184]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	604b      	str	r3, [r1, #4]
 8000a4a:	e006      	b.n	8000a5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4929      	ldr	r1, [pc, #164]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a56:	4013      	ands	r3, r2
 8000a58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	4924      	ldr	r1, [pc, #144]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	608b      	str	r3, [r1, #8]
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	491f      	ldr	r1, [pc, #124]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	491a      	ldr	r1, [pc, #104]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60cb      	str	r3, [r1, #12]
 8000a9a:	e006      	b.n	8000aaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	4915      	ldr	r1, [pc, #84]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	3301      	adds	r3, #1
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f47f aed0 	bne.w	8000860 <HAL_GPIO_Init+0x14>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	372c      	adds	r7, #44	; 0x2c
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10110000 	.word	0x10110000
 8000ad4:	10120000 	.word	0x10120000
 8000ad8:	10310000 	.word	0x10310000
 8000adc:	10320000 	.word	0x10320000
 8000ae0:	10220000 	.word	0x10220000
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40011400 	.word	0x40011400
 8000afc:	40010400 	.word	0x40010400

08000b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e001      	b.n	8000b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b30:	b08b      	sub	sp, #44	; 0x2c
 8000b32:	af06      	add	r7, sp, #24
 8000b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e0fd      	b.n	8000d3c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f005 ff1b 	bl	8006990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 f952 	bl	8002e10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	687e      	ldr	r6, [r7, #4]
 8000b74:	466d      	mov	r5, sp
 8000b76:	f106 0410 	add.w	r4, r6, #16
 8000b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	1d33      	adds	r3, r6, #4
 8000b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b86:	6838      	ldr	r0, [r7, #0]
 8000b88:	f002 f91c 	bl	8002dc4 <USB_CoreInit>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2202      	movs	r2, #2
 8000b96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e0ce      	b.n	8000d3c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 f94d 	bl	8002e44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e04c      	b.n	8000c4a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	440b      	add	r3, r1
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	b298      	uxth	r0, r3
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	3336      	adds	r3, #54	; 0x36
 8000bee:	4602      	mov	r2, r0
 8000bf0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	440b      	add	r3, r1
 8000c02:	3303      	adds	r3, #3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	3338      	adds	r3, #56	; 0x38
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	440b      	add	r3, r1
 8000c2a:	333c      	adds	r3, #60	; 0x3c
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c30:	7bfa      	ldrb	r2, [r7, #15]
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	440b      	add	r3, r1
 8000c3e:	3340      	adds	r3, #64	; 0x40
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3ad      	bcc.n	8000bb0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e044      	b.n	8000ce4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c5a:	7bfa      	ldrb	r2, [r7, #15]
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c70:	7bfa      	ldrb	r2, [r7, #15]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	440b      	add	r3, r1
 8000caa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3b5      	bcc.n	8000c5a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	687e      	ldr	r6, [r7, #4]
 8000cf6:	466d      	mov	r5, sp
 8000cf8:	f106 0410 	add.w	r4, r6, #16
 8000cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	602b      	str	r3, [r5, #0]
 8000d04:	1d33      	adds	r3, r6, #4
 8000d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d08:	6838      	ldr	r0, [r7, #0]
 8000d0a:	f002 f8a7 	bl	8002e5c <USB_DevInit>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2202      	movs	r2, #2
 8000d18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e00d      	b.n	8000d3c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 fa18 	bl	800516a <USB_DevDisconnect>

  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d101      	bne.n	8000d5a <HAL_PCD_Start+0x16>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e016      	b.n	8000d88 <HAL_PCD_Start+0x44>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 f83c 	bl	8002de4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f006 f85d 	bl	8006e2e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 f9ec 	bl	8005156 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 f9ee 	bl	800517e <USB_ReadInterrupts>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dac:	d102      	bne.n	8000db4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fb4a 	bl	8001448 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 f9e0 	bl	800517e <USB_ReadInterrupts>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc8:	d112      	bne.n	8000df0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ddc:	b292      	uxth	r2, r2
 8000dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f005 fe4f 	bl	8006a86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000de8:	2100      	movs	r1, #0
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f925 	bl	800103a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 f9c2 	bl	800517e <USB_ReadInterrupts>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e04:	d10b      	bne.n	8000e1e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e18:	b292      	uxth	r2, r2
 8000e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 f9ab 	bl	800517e <USB_ReadInterrupts>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e32:	d10b      	bne.n	8000e4c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e46:	b292      	uxth	r2, r2
 8000e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 f994 	bl	800517e <USB_ReadInterrupts>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e60:	d126      	bne.n	8000eb0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0204 	bic.w	r2, r2, #4
 8000e74:	b292      	uxth	r2, r2
 8000e76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0208 	bic.w	r2, r2, #8
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f005 fe30 	bl	8006af8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 f962 	bl	800517e <USB_ReadInterrupts>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ec4:	f040 8084 	bne.w	8000fd0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	77fb      	strb	r3, [r7, #31]
 8000ecc:	e011      	b.n	8000ef2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	7ffb      	ldrb	r3, [r7, #31]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	441a      	add	r2, r3
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	f107 0120 	add.w	r1, r7, #32
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000eec:	7ffb      	ldrb	r3, [r7, #31]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	77fb      	strb	r3, [r7, #31]
 8000ef2:	7ffb      	ldrb	r3, [r7, #31]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	d9ea      	bls.n	8000ece <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	b292      	uxth	r2, r2
 8000f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f28:	bf00      	nop
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f6      	beq.n	8000f2a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	77fb      	strb	r3, [r7, #31]
 8000f58:	e010      	b.n	8000f7c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f5a:	7ffb      	ldrb	r3, [r7, #31]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	4611      	mov	r1, r2
 8000f62:	7ffa      	ldrb	r2, [r7, #31]
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	440a      	add	r2, r1
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	f107 0120 	add.w	r1, r7, #32
 8000f6e:	440b      	add	r3, r1
 8000f70:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f74:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f76:	7ffb      	ldrb	r3, [r7, #31]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	77fb      	strb	r3, [r7, #31]
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	d9eb      	bls.n	8000f5a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0208 	orr.w	r2, r2, #8
 8000f94:	b292      	uxth	r2, r2
 8000f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fac:	b292      	uxth	r2, r2
 8000fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0204 	orr.w	r2, r2, #4
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f005 fd7a 	bl	8006ac4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 f8d2 	bl	800517e <USB_ReadInterrupts>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe4:	d10e      	bne.n	8001004 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ff8:	b292      	uxth	r2, r2
 8000ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f005 fd33 	bl	8006a6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f004 f8b8 	bl	800517e <USB_ReadInterrupts>
 800100e:	4603      	mov	r3, r0
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001018:	d10b      	bne.n	8001032 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800102c:	b292      	uxth	r2, r2
 800102e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_PCD_SetAddress+0x1a>
 8001050:	2302      	movs	r3, #2
 8001052:	e013      	b.n	800107c <HAL_PCD_SetAddress+0x42>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f004 f85f 	bl	8005130 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	4608      	mov	r0, r1
 800108e:	4611      	mov	r1, r2
 8001090:	461a      	mov	r2, r3
 8001092:	4603      	mov	r3, r0
 8001094:	70fb      	strb	r3, [r7, #3]
 8001096:	460b      	mov	r3, r1
 8001098:	803b      	strh	r3, [r7, #0]
 800109a:	4613      	mov	r3, r2
 800109c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da0e      	bge.n	80010c8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2201      	movs	r2, #1
 80010c4:	705a      	strb	r2, [r3, #1]
 80010c6:	e00e      	b.n	80010e6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	f003 0207 	and.w	r2, r3, #7
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010f2:	883a      	ldrh	r2, [r7, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001110:	78bb      	ldrb	r3, [r7, #2]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d102      	bne.n	800111c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_PCD_EP_Open+0xa6>
 8001126:	2302      	movs	r3, #2
 8001128:	e00e      	b.n	8001148 <HAL_PCD_EP_Open+0xc4>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	f001 feaf 	bl	8002e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001146:	7afb      	ldrb	r3, [r7, #11]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800115c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001160:	2b00      	cmp	r3, #0
 8001162:	da0e      	bge.n	8001182 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2201      	movs	r2, #1
 800117e:	705a      	strb	r2, [r3, #1]
 8001180:	e00e      	b.n	80011a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	f003 0207 	and.w	r2, r3, #7
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_PCD_EP_Close+0x6a>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e00e      	b.n	80011d8 <HAL_PCD_EP_Close+0x88>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f9d1 	bl	8003570 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	460b      	mov	r3, r1
 80011ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	f003 0207 	and.w	r2, r3, #7
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4413      	add	r3, r2
 8001206:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2200      	movs	r2, #0
 800121e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	b2da      	uxtb	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6979      	ldr	r1, [r7, #20]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fb83 	bl	8003948 <USB_EPStartXfer>
 8001242:	e005      	b.n	8001250 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6979      	ldr	r1, [r7, #20]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fb7c 	bl	8003948 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	460b      	mov	r3, r1
 8001268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2201      	movs	r2, #1
 80012a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fb40 	bl	8003948 <USB_EPStartXfer>
 80012c8:	e005      	b.n	80012d6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fb39 	bl	8003948 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	f003 0207 	and.w	r2, r3, #7
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d901      	bls.n	80012fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e04c      	b.n	8001398 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001302:	2b00      	cmp	r3, #0
 8001304:	da0e      	bge.n	8001324 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2201      	movs	r2, #1
 8001320:	705a      	strb	r2, [r3, #1]
 8001322:	e00c      	b.n	800133e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2201      	movs	r2, #1
 8001342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	b2da      	uxtb	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_PCD_EP_SetStall+0x7e>
 800135a:	2302      	movs	r3, #2
 800135c:	e01c      	b.n	8001398 <HAL_PCD_EP_SetStall+0xb8>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68f9      	ldr	r1, [r7, #12]
 800136c:	4618      	mov	r0, r3
 800136e:	f003 fde2 	bl	8004f36 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	2b00      	cmp	r3, #0
 800137a:	d108      	bne.n	800138e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001386:	4619      	mov	r1, r3
 8001388:	4610      	mov	r0, r2
 800138a:	f003 ff07 	bl	800519c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	f003 020f 	and.w	r2, r3, #15
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d901      	bls.n	80013be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e040      	b.n	8001440 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da0e      	bge.n	80013e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	705a      	strb	r2, [r3, #1]
 80013e2:	e00e      	b.n	8001402 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	f003 0207 	and.w	r2, r3, #7
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	b2da      	uxtb	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_PCD_EP_ClrStall+0x82>
 800141e:	2302      	movs	r3, #2
 8001420:	e00e      	b.n	8001440 <HAL_PCD_EP_ClrStall+0xa0>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68f9      	ldr	r1, [r7, #12]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fdd0 	bl	8004fd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001450:	e2ec      	b.n	8001a2c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800145c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001468:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 8161 	bne.w	8001734 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b00      	cmp	r3, #0
 800147a:	d152      	bne.n	8001522 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800149c:	b29b      	uxth	r3, r3
 800149e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3328      	adds	r3, #40	; 0x28
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	3302      	adds	r3, #2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	441a      	add	r2, r3
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014e0:	2100      	movs	r1, #0
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f005 faa7 	bl	8006a36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 829b 	beq.w	8001a2c <PCD_EP_ISR_Handler+0x5e4>
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 8296 	bne.w	8001a2c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800150c:	b2da      	uxtb	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b292      	uxth	r2, r2
 8001514:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001520:	e284      	b.n	8001a2c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001532:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001538:	2b00      	cmp	r3, #0
 800153a:	d034      	beq.n	80015a6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	3306      	adds	r3, #6
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800157a:	b29b      	uxth	r3, r3
 800157c:	f003 fe5d 	bl	800523a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b29a      	uxth	r2, r3
 8001588:	f640 738f 	movw	r3, #3983	; 0xf8f
 800158c:	4013      	ands	r3, r2
 800158e:	823b      	strh	r3, [r7, #16]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	8a3a      	ldrh	r2, [r7, #16]
 8001596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159a:	b292      	uxth	r2, r2
 800159c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f005 fa1c 	bl	80069dc <HAL_PCD_SetupStageCallback>
 80015a4:	e242      	b.n	8001a2c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f280 823e 	bge.w	8001a2c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015bc:	4013      	ands	r3, r2
 80015be:	83bb      	strh	r3, [r7, #28]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	8bba      	ldrh	r2, [r7, #28]
 80015c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ca:	b292      	uxth	r2, r2
 80015cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	3306      	adds	r3, #6
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d019      	beq.n	8001636 <PCD_EP_ISR_Handler+0x1ee>
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d015      	beq.n	8001636 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	6959      	ldr	r1, [r3, #20]
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800161a:	b29b      	uxth	r3, r3
 800161c:	f003 fe0d 	bl	800523a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	441a      	add	r2, r3
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f005 f9e5 	bl	8006a00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 81f2 	bne.w	8001a2c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001656:	b29b      	uxth	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4413      	add	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d112      	bne.n	8001696 <PCD_EP_ISR_Handler+0x24e>
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800167a:	b29a      	uxth	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	801a      	strh	r2, [r3, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800168a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800168e:	b29a      	uxth	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	801a      	strh	r2, [r3, #0]
 8001694:	e02f      	b.n	80016f6 <PCD_EP_ISR_Handler+0x2ae>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b3e      	cmp	r3, #62	; 0x3e
 800169c:	d813      	bhi.n	80016c6 <PCD_EP_ISR_Handler+0x27e>
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <PCD_EP_ISR_Handler+0x270>
 80016b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b4:	3301      	adds	r3, #1
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
 80016b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	b29a      	uxth	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	e017      	b.n	80016f6 <PCD_EP_ISR_Handler+0x2ae>
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <PCD_EP_ISR_Handler+0x298>
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	3b01      	subs	r3, #1
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
 80016e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	029b      	lsls	r3, r3, #10
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001706:	827b      	strh	r3, [r7, #18]
 8001708:	8a7b      	ldrh	r3, [r7, #18]
 800170a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800170e:	827b      	strh	r3, [r7, #18]
 8001710:	8a7b      	ldrh	r3, [r7, #18]
 8001712:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001716:	827b      	strh	r3, [r7, #18]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	8a7b      	ldrh	r3, [r7, #18]
 800171e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172e:	b29b      	uxth	r3, r3
 8001730:	8013      	strh	r3, [r2, #0]
 8001732:	e17b      	b.n	8001a2c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001746:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800174a:	2b00      	cmp	r3, #0
 800174c:	f280 80ea 	bge.w	8001924 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29a      	uxth	r2, r3
 8001762:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001766:	4013      	ands	r3, r2
 8001768:	853b      	strh	r3, [r7, #40]	; 0x28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800177a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800177e:	b292      	uxth	r2, r2
 8001780:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001782:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d122      	bne.n	80017e6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	3306      	adds	r3, #6
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8087 	beq.w	80018e0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	6959      	ldr	r1, [r3, #20]
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	88da      	ldrh	r2, [r3, #6]
 80017de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017e0:	f003 fd2b 	bl	800523a <USB_ReadPMA>
 80017e4:	e07c      	b.n	80018e0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	78db      	ldrb	r3, [r3, #3]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d108      	bne.n	8001800 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017f0:	461a      	mov	r2, r3
 80017f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f927 	bl	8001a48 <HAL_PCD_EP_DB_Receive>
 80017fa:	4603      	mov	r3, r0
 80017fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017fe:	e06f      	b.n	80018e0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181a:	847b      	strh	r3, [r7, #34]	; 0x22
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	441a      	add	r2, r3
 800182a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800182c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001838:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800183c:	b29b      	uxth	r3, r3
 800183e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d021      	beq.n	800189e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	3302      	adds	r3, #2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	4413      	add	r3, r2
 8001878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001882:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001886:	2b00      	cmp	r3, #0
 8001888:	d02a      	beq.n	80018e0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	6959      	ldr	r1, [r3, #20]
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	891a      	ldrh	r2, [r3, #8]
 8001896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001898:	f003 fccf 	bl	800523a <USB_ReadPMA>
 800189c:	e020      	b.n	80018e0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	3306      	adds	r3, #6
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	6959      	ldr	r1, [r3, #20]
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	895a      	ldrh	r2, [r3, #10]
 80018da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018dc:	f003 fcad 	bl	800523a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e6:	441a      	add	r2, r3
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018f2:	441a      	add	r2, r3
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <PCD_EP_ISR_Handler+0x4c2>
 8001900:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	429a      	cmp	r2, r3
 8001908:	d206      	bcs.n	8001918 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f005 f875 	bl	8006a00 <HAL_PCD_DataOutStageCallback>
 8001916:	e005      	b.n	8001924 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800191e:	4618      	mov	r0, r3
 8001920:	f002 f812 	bl	8003948 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001924:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192a:	2b00      	cmp	r3, #0
 800192c:	d07e      	beq.n	8001a2c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800192e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195c:	843b      	strh	r3, [r7, #32]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	441a      	add	r2, r3
 800196c:	8c3b      	ldrh	r3, [r7, #32]
 800196e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001976:	b29b      	uxth	r3, r3
 8001978:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d00c      	beq.n	800199c <PCD_EP_ISR_Handler+0x554>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	78db      	ldrb	r3, [r3, #3]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800198e:	2b02      	cmp	r3, #2
 8001990:	d146      	bne.n	8001a20 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001992:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d141      	bne.n	8001a20 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	3302      	adds	r3, #2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	8bfb      	ldrh	r3, [r7, #30]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d906      	bls.n	80019de <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	699a      	ldr	r2, [r3, #24]
 80019d4:	8bfb      	ldrh	r3, [r7, #30]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	619a      	str	r2, [r3, #24]
 80019dc:	e002      	b.n	80019e4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d106      	bne.n	80019fa <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f005 f81f 	bl	8006a36 <HAL_PCD_DataInStageCallback>
 80019f8:	e018      	b.n	8001a2c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	8bfb      	ldrh	r3, [r7, #30]
 8001a00:	441a      	add	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	8bfb      	ldrh	r3, [r7, #30]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 ff95 	bl	8003948 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a1e:	e005      	b.n	8001a2c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a22:	461a      	mov	r2, r3
 8001a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f91b 	bl	8001c62 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f6ff ad0a 	blt.w	8001452 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d07e      	beq.n	8001b5e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	3302      	adds	r3, #2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a88:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	8b7b      	ldrh	r3, [r7, #26]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d306      	bcc.n	8001aa2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	8b7b      	ldrh	r3, [r7, #26]
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	e002      	b.n	8001aa8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d123      	bne.n	8001af8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aca:	833b      	strh	r3, [r7, #24]
 8001acc:	8b3b      	ldrh	r3, [r7, #24]
 8001ace:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ad2:	833b      	strh	r3, [r7, #24]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	441a      	add	r2, r3
 8001ae2:	8b3b      	ldrh	r3, [r7, #24]
 8001ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01f      	beq.n	8001b42 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1c:	82fb      	strh	r3, [r7, #22]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	441a      	add	r2, r3
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b42:	8b7b      	ldrh	r3, [r7, #26]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8087 	beq.w	8001c58 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	6959      	ldr	r1, [r3, #20]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	891a      	ldrh	r2, [r3, #8]
 8001b56:	8b7b      	ldrh	r3, [r7, #26]
 8001b58:	f003 fb6f 	bl	800523a <USB_ReadPMA>
 8001b5c:	e07c      	b.n	8001c58 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	3306      	adds	r3, #6
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b86:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	699a      	ldr	r2, [r3, #24]
 8001b8c:	8b7b      	ldrh	r3, [r7, #26]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d306      	bcc.n	8001ba0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	8b7b      	ldrh	r3, [r7, #26]
 8001b98:	1ad2      	subs	r2, r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	e002      	b.n	8001ba6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d123      	bne.n	8001bf6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc8:	83fb      	strh	r3, [r7, #30]
 8001bca:	8bfb      	ldrh	r3, [r7, #30]
 8001bcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	441a      	add	r2, r3
 8001be0:	8bfb      	ldrh	r3, [r7, #30]
 8001be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11f      	bne.n	8001c40 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	83bb      	strh	r3, [r7, #28]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	441a      	add	r2, r3
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c40:	8b7b      	ldrh	r3, [r7, #26]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	6959      	ldr	r1, [r3, #20]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	895a      	ldrh	r2, [r3, #10]
 8001c52:	8b7b      	ldrh	r3, [r7, #26]
 8001c54:	f003 faf1 	bl	800523a <USB_ReadPMA>
    }
  }

  return count;
 8001c58:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b0a2      	sub	sp, #136	; 0x88
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 81c7 	beq.w	800200a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3302      	adds	r3, #2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d907      	bls.n	8001cc4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001cbc:	1ad2      	subs	r2, r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	619a      	str	r2, [r3, #24]
 8001cc2:	e002      	b.n	8001cca <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 80b9 	bne.w	8001e46 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d126      	bne.n	8001d2a <HAL_PCD_EP_DB_Transmit+0xc8>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	4413      	add	r3, r2
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	011a      	lsls	r2, r3, #4
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	801a      	strh	r2, [r3, #0]
 8001d28:	e01a      	b.n	8001d60 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d116      	bne.n	8001d60 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	4413      	add	r3, r2
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	011a      	lsls	r2, r3, #4
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	4413      	add	r3, r2
 8001d54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d126      	bne.n	8001dbc <HAL_PCD_EP_DB_Transmit+0x15a>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	4413      	add	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	011a      	lsls	r2, r3, #4
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	e017      	b.n	8001dec <HAL_PCD_EP_DB_Transmit+0x18a>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d113      	bne.n	8001dec <HAL_PCD_EP_DB_Transmit+0x18a>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	011a      	lsls	r2, r3, #4
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	4413      	add	r3, r2
 8001de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	2200      	movs	r2, #0
 8001dea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f004 fe1f 	bl	8006a36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 82d1 	beq.w	80023a6 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	827b      	strh	r3, [r7, #18]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	441a      	add	r2, r3
 8001e2e:	8a7b      	ldrh	r3, [r7, #18]
 8001e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	8013      	strh	r3, [r2, #0]
 8001e44:	e2af      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d021      	beq.n	8001e94 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	441a      	add	r2, r3
 8001e7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	f040 8283 	bne.w	80023a6 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001ea8:	441a      	add	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001eb6:	441a      	add	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d309      	bcc.n	8001edc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ed4:	1ad2      	subs	r2, r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	e015      	b.n	8001f08 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001ee4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001ee8:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ef2:	e009      	b.n	8001f08 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	785b      	ldrb	r3, [r3, #1]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d155      	bne.n	8001fbc <HAL_PCD_EP_DB_Transmit+0x35a>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	4413      	add	r3, r2
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	011a      	lsls	r2, r3, #4
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f30:	4413      	add	r3, r2
 8001f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
 8001f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d112      	bne.n	8001f64 <HAL_PCD_EP_DB_Transmit+0x302>
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	801a      	strh	r2, [r3, #0]
 8001f62:	e047      	b.n	8001ff4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f66:	2b3e      	cmp	r3, #62	; 0x3e
 8001f68:	d811      	bhi.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x32c>
 8001f6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8001f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8001f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	e032      	b.n	8001ff4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	653b      	str	r3, [r7, #80]	; 0x50
 8001f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_EP_DB_Transmit+0x342>
 8001f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8001fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	e01b      	b.n	8001ff4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d117      	bne.n	8001ff4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd8:	4413      	add	r3, r2
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	011a      	lsls	r2, r3, #4
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6959      	ldr	r1, [r3, #20]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	891a      	ldrh	r2, [r3, #8]
 8002000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002002:	b29b      	uxth	r3, r3
 8002004:	f003 f8d5 	bl	80051b2 <USB_WritePMA>
 8002008:	e1cd      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	3306      	adds	r3, #6
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4413      	add	r3, r2
 8002028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002032:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800203e:	429a      	cmp	r2, r3
 8002040:	d307      	bcc.n	8002052 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	e002      	b.n	8002058 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 80c1 	bne.w	80021e4 <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d126      	bne.n	80020b8 <HAL_PCD_EP_DB_Transmit+0x456>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800207e:	4413      	add	r3, r2
 8002080:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	011a      	lsls	r2, r3, #4
 8002088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800208a:	4413      	add	r3, r2
 800208c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002090:	67bb      	str	r3, [r7, #120]	; 0x78
 8002092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800209c:	b29a      	uxth	r2, r3
 800209e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b4:	801a      	strh	r2, [r3, #0]
 80020b6:	e01a      	b.n	80020ee <HAL_PCD_EP_DB_Transmit+0x48c>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d116      	bne.n	80020ee <HAL_PCD_EP_DB_Transmit+0x48c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	673b      	str	r3, [r7, #112]	; 0x70
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d4:	4413      	add	r3, r2
 80020d6:	673b      	str	r3, [r7, #112]	; 0x70
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	011a      	lsls	r2, r3, #4
 80020de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e0:	4413      	add	r3, r2
 80020e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ea:	2200      	movs	r2, #0
 80020ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d126      	bne.n	800214c <HAL_PCD_EP_DB_Transmit+0x4ea>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210c:	b29b      	uxth	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002112:	4413      	add	r3, r2
 8002114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	011a      	lsls	r2, r3, #4
 800211c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211e:	4413      	add	r3, r2
 8002120:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002124:	64bb      	str	r3, [r7, #72]	; 0x48
 8002126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002130:	b29a      	uxth	r2, r3
 8002132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002134:	801a      	strh	r2, [r3, #0]
 8002136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002144:	b29a      	uxth	r2, r3
 8002146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	e01c      	b.n	8002186 <HAL_PCD_EP_DB_Transmit+0x524>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d118      	bne.n	8002186 <HAL_PCD_EP_DB_Transmit+0x524>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002164:	4413      	add	r3, r2
 8002166:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	011a      	lsls	r2, r3, #4
 8002170:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002174:	4413      	add	r3, r2
 8002176:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800217a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800217e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002182:	2200      	movs	r2, #0
 8002184:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f004 fc52 	bl	8006a36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 8104 	bne.w	80023a6 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	441a      	add	r2, r3
 80021ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021de:	b29b      	uxth	r3, r3
 80021e0:	8013      	strh	r3, [r2, #0]
 80021e2:	e0e0      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d121      	bne.n	8002232 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800221e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800222a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222e:	b29b      	uxth	r3, r3
 8002230:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 80b4 	bne.w	80023a6 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002246:	441a      	add	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002254:	441a      	add	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	429a      	cmp	r2, r3
 8002264:	d309      	bcc.n	800227a <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002272:	1ad2      	subs	r2, r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	621a      	str	r2, [r3, #32]
 8002278:	e015      	b.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 8002282:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002286:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002290:	e009      	b.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	667b      	str	r3, [r7, #100]	; 0x64
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	785b      	ldrb	r3, [r3, #1]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d155      	bne.n	8002360 <HAL_PCD_EP_DB_Transmit+0x6fe>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c8:	4413      	add	r3, r2
 80022ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	011a      	lsls	r2, r3, #4
 80022d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d4:	4413      	add	r3, r2
 80022d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022da:	65bb      	str	r3, [r7, #88]	; 0x58
 80022dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d112      	bne.n	8002308 <HAL_PCD_EP_DB_Transmit+0x6a6>
 80022e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002300:	b29a      	uxth	r2, r3
 8002302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	e044      	b.n	8002392 <HAL_PCD_EP_DB_Transmit+0x730>
 8002308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800230a:	2b3e      	cmp	r3, #62	; 0x3e
 800230c:	d811      	bhi.n	8002332 <HAL_PCD_EP_DB_Transmit+0x6d0>
 800230e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	677b      	str	r3, [r7, #116]	; 0x74
 8002314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_PCD_EP_DB_Transmit+0x6c2>
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	3301      	adds	r3, #1
 8002322:	677b      	str	r3, [r7, #116]	; 0x74
 8002324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002326:	b29b      	uxth	r3, r3
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	b29a      	uxth	r2, r3
 800232c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	e02f      	b.n	8002392 <HAL_PCD_EP_DB_Transmit+0x730>
 8002332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	677b      	str	r3, [r7, #116]	; 0x74
 8002338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_PCD_EP_DB_Transmit+0x6e6>
 8002342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002344:	3b01      	subs	r3, #1
 8002346:	677b      	str	r3, [r7, #116]	; 0x74
 8002348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234a:	b29b      	uxth	r3, r3
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	b29b      	uxth	r3, r3
 8002350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002358:	b29a      	uxth	r2, r3
 800235a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	e018      	b.n	8002392 <HAL_PCD_EP_DB_Transmit+0x730>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	785b      	ldrb	r3, [r3, #1]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d114      	bne.n	8002392 <HAL_PCD_EP_DB_Transmit+0x730>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002370:	b29b      	uxth	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002376:	4413      	add	r3, r2
 8002378:	667b      	str	r3, [r7, #100]	; 0x64
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	011a      	lsls	r2, r3, #4
 8002380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002382:	4413      	add	r3, r2
 8002384:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002388:	663b      	str	r3, [r7, #96]	; 0x60
 800238a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800238c:	b29a      	uxth	r2, r3
 800238e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002390:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6959      	ldr	r1, [r3, #20]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	895a      	ldrh	r2, [r3, #10]
 800239e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f002 ff06 	bl	80051b2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c0:	823b      	strh	r3, [r7, #16]
 80023c2:	8a3b      	ldrh	r3, [r7, #16]
 80023c4:	f083 0310 	eor.w	r3, r3, #16
 80023c8:	823b      	strh	r3, [r7, #16]
 80023ca:	8a3b      	ldrh	r3, [r7, #16]
 80023cc:	f083 0320 	eor.w	r3, r3, #32
 80023d0:	823b      	strh	r3, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	441a      	add	r2, r3
 80023e0:	8a3b      	ldrh	r3, [r7, #16]
 80023e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3788      	adds	r7, #136	; 0x88
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	817b      	strh	r3, [r7, #10]
 800240e:	4613      	mov	r3, r2
 8002410:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241e:	897b      	ldrh	r3, [r7, #10]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e009      	b.n	800244a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002436:	897a      	ldrh	r2, [r7, #10]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800244a:	893b      	ldrh	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	b29a      	uxth	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	80da      	strh	r2, [r3, #6]
 800245e:	e00b      	b.n	8002478 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2201      	movs	r2, #1
 8002464:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	b29a      	uxth	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b29a      	uxth	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e26c      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00c      	beq.n	80024ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b0:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ca:	4b89      	ldr	r3, [pc, #548]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d06c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x12c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d168      	bne.n	80025b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e246      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x76>
 80024ec:	4b80      	ldr	r3, [pc, #512]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a7f      	ldr	r2, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e02e      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7a      	ldr	r2, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b78      	ldr	r3, [pc, #480]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a77      	ldr	r2, [pc, #476]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0xbc>
 8002526:	4b72      	ldr	r3, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a71      	ldr	r2, [pc, #452]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6e      	ldr	r2, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xd4>
 8002540:	4b6b      	ldr	r3, [pc, #428]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a67      	ldr	r2, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe f83a 	bl	80005d8 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe f836 	bl	80005d8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1fa      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5d      	ldr	r3, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xe4>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe f826 	bl	80005d8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe f822 	bl	80005d8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1e6      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x10c>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ca:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1ba      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4939      	ldr	r1, [pc, #228]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCC_OscConfig+0x270>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fd ffdb 	bl	80005d8 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7fd ffd7 	bl	80005d8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e19b      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4927      	ldr	r1, [pc, #156]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x270>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fd ffba 	bl	80005d8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7fd ffb6 	bl	80005d8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e17a      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03a      	beq.n	8002708 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d019      	beq.n	80026ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_RCC_OscConfig+0x274>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7fd ff9a 	bl	80005d8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fd ff96 	bl	80005d8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e15a      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f000 faa8 	bl	8002c1c <RCC_Delay>
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCC_OscConfig+0x274>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7fd ff80 	bl	80005d8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026da:	e00f      	b.n	80026fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fd ff7c 	bl	80005d8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d908      	bls.n	80026fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e140      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	42420000 	.word	0x42420000
 80026f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b9e      	ldr	r3, [pc, #632]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e9      	bne.n	80026dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a6 	beq.w	8002862 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b97      	ldr	r3, [pc, #604]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b94      	ldr	r3, [pc, #592]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a93      	ldr	r2, [pc, #588]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b91      	ldr	r3, [pc, #580]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b8e      	ldr	r3, [pc, #568]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b8b      	ldr	r3, [pc, #556]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a8a      	ldr	r2, [pc, #552]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fd ff3d 	bl	80005d8 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fd ff39 	bl	80005d8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0fd      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b81      	ldr	r3, [pc, #516]	; (800297c <HAL_RCC_OscConfig+0x4f8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x312>
 8002788:	4b7b      	ldr	r3, [pc, #492]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a7a      	ldr	r2, [pc, #488]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x334>
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a75      	ldr	r2, [pc, #468]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x356>
 80027c0:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a6c      	ldr	r2, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a69      	ldr	r2, [pc, #420]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x36e>
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a66      	ldr	r2, [pc, #408]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6213      	str	r3, [r2, #32]
 80027e6:	4b64      	ldr	r3, [pc, #400]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a63      	ldr	r2, [pc, #396]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fd feed 	bl	80005d8 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fd fee9 	bl	80005d8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0ab      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b57      	ldr	r3, [pc, #348]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x37e>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fd fed7 	bl	80005d8 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fd fed3 	bl	80005d8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e095      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b48      	ldr	r3, [pc, #288]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8081 	beq.w	800296e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d061      	beq.n	800293c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d146      	bne.n	800290e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_OscConfig+0x4fc>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fd fea7 	bl	80005d8 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fd fea3 	bl	80005d8 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e067      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d108      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	492d      	ldr	r1, [pc, #180]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a19      	ldr	r1, [r3, #32]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	430b      	orrs	r3, r1
 80028da:	4927      	ldr	r1, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x4fc>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fd fe77 	bl	80005d8 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fd fe73 	bl	80005d8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e037      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x46a>
 800290c:	e02f      	b.n	800296e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_RCC_OscConfig+0x4fc>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fd fe60 	bl	80005d8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fd fe5c 	bl	80005d8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e020      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x498>
 800293a:	e018      	b.n	800296e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e013      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_OscConfig+0x4f4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	429a      	cmp	r2, r3
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	40007000 	.word	0x40007000
 8002980:	42420060 	.word	0x42420060

08002984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0d0      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4965      	ldr	r1, [pc, #404]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e073      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06b      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4936      	ldr	r1, [pc, #216]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fd fdb0 	bl	80005d8 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fd fdac 	bl	80005d8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e053      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d210      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4922      	ldr	r1, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	5cd3      	ldrb	r3, [r2, r3]
 8002b26:	fa21 f303 	lsr.w	r3, r1, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1cc>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1d0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fd0e 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08006f68 	.word	0x08006f68
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b490      	push	{r4, r7}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b60:	1d3c      	adds	r4, r7, #4
 8002b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b68:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x40>
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x46>
 8002b96:	e02d      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b9a:	623b      	str	r3, [r7, #32]
      break;
 8002b9c:	e02d      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	0c9b      	lsrs	r3, r3, #18
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002baa:	4413      	add	r3, r2
 8002bac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c5b      	lsrs	r3, r3, #17
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bca:	4413      	add	r3, r2
 8002bcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bd6:	fb02 f203 	mul.w	r2, r2, r3
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e004      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	623b      	str	r3, [r7, #32]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf6:	623b      	str	r3, [r7, #32]
      break;
 8002bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc90      	pop	{r4, r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	08006f0c 	.word	0x08006f0c
 8002c0c:	08006f1c 	.word	0x08006f1c
 8002c10:	40021000 	.word	0x40021000
 8002c14:	007a1200 	.word	0x007a1200
 8002c18:	003d0900 	.word	0x003d0900

08002c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <RCC_Delay+0x34>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <RCC_Delay+0x38>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c38:	bf00      	nop
  }
  while (Delay --);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <RCC_Delay+0x1c>
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d07d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c84:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	61d3      	str	r3, [r2, #28]
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d118      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb8:	f7fd fc8e 	bl	80005d8 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fd fc8a 	bl	80005d8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e06d      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d02e      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d027      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d12:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fd fc59 	bl	80005d8 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fd fc55 	bl	80005d8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e036      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4917      	ldr	r1, [pc, #92]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	490b      	ldr	r1, [pc, #44]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4904      	ldr	r1, [pc, #16]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40007000 	.word	0x40007000
 8002dc0:	42420440 	.word	0x42420440

08002dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	f107 0014 	add.w	r0, r7, #20
 8002dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	b004      	add	sp, #16
 8002de2:	4770      	bx	lr

08002de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002df4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002df8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	f107 0014 	add.w	r0, r7, #20
 8002e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	b004      	add	sp, #16
 8002e9a:	4770      	bx	lr

08002e9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b09b      	sub	sp, #108	; 0x6c
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	78db      	ldrb	r3, [r3, #3]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d81f      	bhi.n	8002f0e <USB_ActivateEndpoint+0x72>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <USB_ActivateEndpoint+0x38>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f17 	.word	0x08002f17
 8002ee0:	08002ef3 	.word	0x08002ef3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ee4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ef0:	e012      	b.n	8002f18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ef2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ef6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002efa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002efe:	e00b      	b.n	8002f18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002f00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002f0c:	e004      	b.n	8002f18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002f14:	e000      	b.n	8002f18 <USB_ActivateEndpoint+0x7c>
      break;
 8002f16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	7b1b      	ldrb	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 8149 	bne.w	800321c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8084 	beq.w	800309c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	011a      	lsls	r2, r3, #4
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	88db      	ldrh	r3, [r3, #6]
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	81fb      	strh	r3, [r7, #14]
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <USB_ActivateEndpoint+0x17c>
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	81bb      	strh	r3, [r7, #12]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	89bb      	ldrh	r3, [r7, #12]
 8003004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003014:	b29b      	uxth	r3, r3
 8003016:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	78db      	ldrb	r3, [r3, #3]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d020      	beq.n	8003062 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003036:	813b      	strh	r3, [r7, #8]
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	f083 0320 	eor.w	r3, r3, #32
 800303e:	813b      	strh	r3, [r7, #8]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	893b      	ldrh	r3, [r7, #8]
 800304c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	b29b      	uxth	r3, r3
 800305e:	8013      	strh	r3, [r2, #0]
 8003060:	e27f      	b.n	8003562 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	897b      	ldrh	r3, [r7, #10]
 8003086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800308a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]
 800309a:	e262      	b.n	8003562 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	4413      	add	r3, r2
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	011a      	lsls	r2, r3, #4
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	88db      	ldrh	r3, [r3, #6]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	4413      	add	r3, r2
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	011a      	lsls	r2, r3, #4
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	4413      	add	r3, r2
 80030ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d112      	bne.n	8003122 <USB_ActivateEndpoint+0x286>
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003106:	b29a      	uxth	r2, r3
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311a:	b29a      	uxth	r2, r3
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	e02f      	b.n	8003182 <USB_ActivateEndpoint+0x2e6>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b3e      	cmp	r3, #62	; 0x3e
 8003128:	d813      	bhi.n	8003152 <USB_ActivateEndpoint+0x2b6>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	663b      	str	r3, [r7, #96]	; 0x60
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <USB_ActivateEndpoint+0x2a8>
 800313e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003140:	3301      	adds	r3, #1
 8003142:	663b      	str	r3, [r7, #96]	; 0x60
 8003144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003146:	b29b      	uxth	r3, r3
 8003148:	029b      	lsls	r3, r3, #10
 800314a:	b29a      	uxth	r2, r3
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	e017      	b.n	8003182 <USB_ActivateEndpoint+0x2e6>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	663b      	str	r3, [r7, #96]	; 0x60
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <USB_ActivateEndpoint+0x2d0>
 8003166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003168:	3b01      	subs	r3, #1
 800316a:	663b      	str	r3, [r7, #96]	; 0x60
 800316c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316e:	b29b      	uxth	r3, r3
 8003170:	029b      	lsls	r3, r3, #10
 8003172:	b29b      	uxth	r3, r3
 8003174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317c:	b29a      	uxth	r2, r3
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	83fb      	strh	r3, [r7, #30]
 8003190:	8bfb      	ldrh	r3, [r7, #30]
 8003192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d01b      	beq.n	80031d2 <USB_ActivateEndpoint+0x336>
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b0:	83bb      	strh	r3, [r7, #28]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	441a      	add	r2, r3
 80031bc:	8bbb      	ldrh	r3, [r7, #28]
 80031be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e8:	837b      	strh	r3, [r7, #26]
 80031ea:	8b7b      	ldrh	r3, [r7, #26]
 80031ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031f0:	837b      	strh	r3, [r7, #26]
 80031f2:	8b7b      	ldrh	r3, [r7, #26]
 80031f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031f8:	837b      	strh	r3, [r7, #26]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	441a      	add	r2, r3
 8003204:	8b7b      	ldrh	r3, [r7, #26]
 8003206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]
 800321a:	e1a2      	b.n	8003562 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65bb      	str	r3, [r7, #88]	; 0x58
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003268:	4413      	add	r3, r2
 800326a:	65bb      	str	r3, [r7, #88]	; 0x58
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	011a      	lsls	r2, r3, #4
 8003272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003274:	4413      	add	r3, r2
 8003276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800327a:	657b      	str	r3, [r7, #84]	; 0x54
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	891b      	ldrh	r3, [r3, #8]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	b29b      	uxth	r3, r3
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328a:	801a      	strh	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	653b      	str	r3, [r7, #80]	; 0x50
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329c:	4413      	add	r3, r2
 800329e:	653b      	str	r3, [r7, #80]	; 0x50
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	011a      	lsls	r2, r3, #4
 80032a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	895b      	ldrh	r3, [r3, #10]
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8091 	bne.w	80033ec <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01b      	beq.n	800331a <USB_ActivateEndpoint+0x47e>
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	441a      	add	r2, r3
 8003304:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003316:	b29b      	uxth	r3, r3
 8003318:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	873b      	strh	r3, [r7, #56]	; 0x38
 8003328:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01b      	beq.n	800336a <USB_ActivateEndpoint+0x4ce>
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	86fb      	strh	r3, [r7, #54]	; 0x36
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003362:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003380:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003382:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003384:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003388:	86bb      	strh	r3, [r7, #52]	; 0x34
 800338a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800338c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003390:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800339e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c8:	867b      	strh	r3, [r7, #50]	; 0x32
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	441a      	add	r2, r3
 80033d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80033d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
 80033ea:	e0ba      	b.n	8003562 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80033fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01d      	beq.n	8003444 <USB_ActivateEndpoint+0x5a8>
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003440:	b29b      	uxth	r3, r3
 8003442:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003454:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01d      	beq.n	800349c <USB_ActivateEndpoint+0x600>
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	441a      	add	r2, r3
 8003484:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003494:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003498:	b29b      	uxth	r3, r3
 800349a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	78db      	ldrb	r3, [r3, #3]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d024      	beq.n	80034ee <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80034be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034c2:	f083 0320 	eor.w	r3, r3, #32
 80034c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	441a      	add	r2, r3
 80034d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
 80034ec:	e01d      	b.n	800352a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003562:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003566:	4618      	mov	r0, r3
 8003568:	376c      	adds	r7, #108	; 0x6c
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003570:	b480      	push	{r7}
 8003572:	b08d      	sub	sp, #52	; 0x34
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	7b1b      	ldrb	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 808e 	bne.w	80036a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d044      	beq.n	8003616 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	81bb      	strh	r3, [r7, #12]
 800359a:	89bb      	ldrh	r3, [r7, #12]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01b      	beq.n	80035dc <USB_DeactivateEndpoint+0x6c>
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	817b      	strh	r3, [r7, #10]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035d8:	b29b      	uxth	r3, r3
 80035da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f2:	813b      	strh	r3, [r7, #8]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	893b      	ldrh	r3, [r7, #8]
 8003600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]
 8003614:	e192      	b.n	800393c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	827b      	strh	r3, [r7, #18]
 8003624:	8a7b      	ldrh	r3, [r7, #18]
 8003626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01b      	beq.n	8003666 <USB_DeactivateEndpoint+0xf6>
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003644:	823b      	strh	r3, [r7, #16]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	441a      	add	r2, r3
 8003650:	8a3b      	ldrh	r3, [r7, #16]
 8003652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800365e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003662:	b29b      	uxth	r3, r3
 8003664:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367c:	81fb      	strh	r3, [r7, #14]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	441a      	add	r2, r3
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369a:	b29b      	uxth	r3, r3
 800369c:	8013      	strh	r3, [r2, #0]
 800369e:	e14d      	b.n	800393c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 80a5 	bne.w	80037f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	843b      	strh	r3, [r7, #32]
 80036b8:	8c3b      	ldrh	r3, [r7, #32]
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01b      	beq.n	80036fa <USB_DeactivateEndpoint+0x18a>
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	83fb      	strh	r3, [r7, #30]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	8bfb      	ldrh	r3, [r7, #30]
 80036e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	83bb      	strh	r3, [r7, #28]
 8003708:	8bbb      	ldrh	r3, [r7, #28]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01b      	beq.n	800374a <USB_DeactivateEndpoint+0x1da>
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003728:	837b      	strh	r3, [r7, #26]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	441a      	add	r2, r3
 8003734:	8b7b      	ldrh	r3, [r7, #26]
 8003736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003746:	b29b      	uxth	r3, r3
 8003748:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003760:	833b      	strh	r3, [r7, #24]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	441a      	add	r2, r3
 800376c:	8b3b      	ldrh	r3, [r7, #24]
 800376e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800377e:	b29b      	uxth	r3, r3
 8003780:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003798:	82fb      	strh	r3, [r7, #22]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	8afb      	ldrh	r3, [r7, #22]
 80037a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d0:	82bb      	strh	r3, [r7, #20]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	8abb      	ldrh	r3, [r7, #20]
 80037de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]
 80037f2:	e0a3      	b.n	800393c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003802:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01b      	beq.n	8003844 <USB_DeactivateEndpoint+0x2d4>
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800383c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003840:	b29b      	uxth	r3, r3
 8003842:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003852:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <USB_DeactivateEndpoint+0x324>
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	853b      	strh	r3, [r7, #40]	; 0x28
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003890:	b29b      	uxth	r3, r3
 8003892:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	441a      	add	r2, r3
 80038ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003900:	b29b      	uxth	r3, r3
 8003902:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	847b      	strh	r3, [r7, #34]	; 0x22
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800392c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003938:	b29b      	uxth	r3, r3
 800393a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3734      	adds	r7, #52	; 0x34
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0cc      	sub	sp, #304	; 0x130
 800394c:	af00      	add	r7, sp, #0
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	6018      	str	r0, [r3, #0]
 8003952:	463b      	mov	r3, r7
 8003954:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003956:	463b      	mov	r3, r7
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	2b01      	cmp	r3, #1
 800395e:	f040 872e 	bne.w	80047be <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003962:	463b      	mov	r3, r7
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	463b      	mov	r3, r7
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	429a      	cmp	r2, r3
 8003970:	d905      	bls.n	800397e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003972:	463b      	mov	r3, r7
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800397c:	e004      	b.n	8003988 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800397e:	463b      	mov	r3, r7
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003988:	463b      	mov	r3, r7
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	7b1b      	ldrb	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d134      	bne.n	80039fc <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003992:	463b      	mov	r3, r7
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6959      	ldr	r1, [r3, #20]
 8003998:	463b      	mov	r3, r7
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	88da      	ldrh	r2, [r3, #6]
 800399e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	1d38      	adds	r0, r7, #4
 80039a6:	6800      	ldr	r0, [r0, #0]
 80039a8:	f001 fc03 	bl	80051b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	1d3a      	adds	r2, r7, #4
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	f107 0310 	add.w	r3, r7, #16
 80039c6:	f107 0210 	add.w	r2, r7, #16
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	440a      	add	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	463b      	mov	r3, r7
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	011a      	lsls	r2, r3, #4
 80039d8:	f107 0310 	add.w	r3, r7, #16
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	f000 beac 	b.w	8004754 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80039fc:	463b      	mov	r3, r7
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	78db      	ldrb	r3, [r3, #3]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	f040 838c 	bne.w	8004120 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003a08:	463b      	mov	r3, r7
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	463b      	mov	r3, r7
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	f240 8330 	bls.w	800407a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	463b      	mov	r3, r7
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a52:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003a5e:	463b      	mov	r3, r7
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a68:	1ad2      	subs	r2, r2, r3
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	463b      	mov	r3, r7
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 819e 	beq.w	8003dc8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a90:	1d3a      	adds	r2, r7, #4
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	463b      	mov	r3, r7
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d17a      	bne.n	8003b96 <USB_EPStartXfer+0x24e>
 8003aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa4:	1d3a      	adds	r2, r7, #4
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	011a      	lsls	r2, r3, #4
 8003acc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11a      	bne.n	8003b1c <USB_EPStartXfer+0x1d4>
 8003ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e062      	b.n	8003be2 <USB_EPStartXfer+0x29a>
 8003b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b20:	2b3e      	cmp	r3, #62	; 0x3e
 8003b22:	d819      	bhi.n	8003b58 <USB_EPStartXfer+0x210>
 8003b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <USB_EPStartXfer+0x1fc>
 8003b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e044      	b.n	8003be2 <USB_EPStartXfer+0x29a>
 8003b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <USB_EPStartXfer+0x230>
 8003b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b72:	3b01      	subs	r3, #1
 8003b74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	e025      	b.n	8003be2 <USB_EPStartXfer+0x29a>
 8003b96:	463b      	mov	r3, r7
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d120      	bne.n	8003be2 <USB_EPStartXfer+0x29a>
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	463b      	mov	r3, r7
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	011a      	lsls	r2, r3, #4
 8003bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003be2:	463b      	mov	r3, r7
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	895b      	ldrh	r3, [r3, #10]
 8003be8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bec:	463b      	mov	r3, r7
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003bfc:	1d38      	adds	r0, r7, #4
 8003bfe:	6800      	ldr	r0, [r0, #0]
 8003c00:	f001 fad7 	bl	80051b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8003c04:	463b      	mov	r3, r7
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c0e:	441a      	add	r2, r3
 8003c10:	463b      	mov	r3, r7
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c16:	463b      	mov	r3, r7
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d909      	bls.n	8003c3a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8003c26:	463b      	mov	r3, r7
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c30:	1ad2      	subs	r2, r2, r3
 8003c32:	463b      	mov	r3, r7
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	621a      	str	r2, [r3, #32]
 8003c38:	e008      	b.n	8003c4c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003c44:	463b      	mov	r3, r7
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d17a      	bne.n	8003d4c <USB_EPStartXfer+0x404>
 8003c56:	f107 0318 	add.w	r3, r7, #24
 8003c5a:	1d3a      	adds	r2, r7, #4
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f107 0318 	add.w	r3, r7, #24
 8003c70:	f107 0218 	add.w	r2, r7, #24
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	440a      	add	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	011a      	lsls	r2, r3, #4
 8003c82:	f107 0318 	add.w	r3, r7, #24
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11a      	bne.n	8003cd2 <USB_EPStartXfer+0x38a>
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	e067      	b.n	8003da2 <USB_EPStartXfer+0x45a>
 8003cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8003cd8:	d819      	bhi.n	8003d0e <USB_EPStartXfer+0x3c6>
 8003cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <USB_EPStartXfer+0x3b2>
 8003cf0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cfa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	f107 0314 	add.w	r3, r7, #20
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	e049      	b.n	8003da2 <USB_EPStartXfer+0x45a>
 8003d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <USB_EPStartXfer+0x3e6>
 8003d24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	f107 0314 	add.w	r3, r7, #20
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e02a      	b.n	8003da2 <USB_EPStartXfer+0x45a>
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d125      	bne.n	8003da2 <USB_EPStartXfer+0x45a>
 8003d56:	f107 0320 	add.w	r3, r7, #32
 8003d5a:	1d3a      	adds	r2, r7, #4
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	1d3b      	adds	r3, r7, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f107 0320 	add.w	r3, r7, #32
 8003d70:	f107 0220 	add.w	r2, r7, #32
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	440a      	add	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	011a      	lsls	r2, r3, #4
 8003d82:	f107 0320 	add.w	r3, r7, #32
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003d8e:	f107 031c 	add.w	r3, r7, #28
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	f107 031c 	add.w	r3, r7, #28
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003da2:	463b      	mov	r3, r7
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	891b      	ldrh	r3, [r3, #8]
 8003da8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dac:	463b      	mov	r3, r7
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6959      	ldr	r1, [r3, #20]
 8003db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003dbc:	1d38      	adds	r0, r7, #4
 8003dbe:	6800      	ldr	r0, [r0, #0]
 8003dc0:	f001 f9f7 	bl	80051b2 <USB_WritePMA>
 8003dc4:	f000 bcc6 	b.w	8004754 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003dc8:	463b      	mov	r3, r7
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d164      	bne.n	8003e9c <USB_EPStartXfer+0x554>
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de6:	4413      	add	r3, r2
 8003de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dea:	463b      	mov	r3, r7
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d112      	bne.n	8003e2a <USB_EPStartXfer+0x4e2>
 8003e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	e057      	b.n	8003eda <USB_EPStartXfer+0x592>
 8003e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e30:	d817      	bhi.n	8003e62 <USB_EPStartXfer+0x51a>
 8003e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <USB_EPStartXfer+0x50a>
 8003e48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	e03b      	b.n	8003eda <USB_EPStartXfer+0x592>
 8003e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <USB_EPStartXfer+0x53a>
 8003e78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	029b      	lsls	r3, r3, #10
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e98:	801a      	strh	r2, [r3, #0]
 8003e9a:	e01e      	b.n	8003eda <USB_EPStartXfer+0x592>
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d119      	bne.n	8003eda <USB_EPStartXfer+0x592>
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eba:	4413      	add	r3, r2
 8003ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8003ebe:	463b      	mov	r3, r7
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	011a      	lsls	r2, r3, #4
 8003ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec8:	4413      	add	r3, r2
 8003eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003eda:	463b      	mov	r3, r7
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	891b      	ldrh	r3, [r3, #8]
 8003ee0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6959      	ldr	r1, [r3, #20]
 8003eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003ef4:	1d38      	adds	r0, r7, #4
 8003ef6:	6800      	ldr	r0, [r0, #0]
 8003ef8:	f001 f95b 	bl	80051b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8003efc:	463b      	mov	r3, r7
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f06:	441a      	add	r2, r3
 8003f08:	463b      	mov	r3, r7
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f0e:	463b      	mov	r3, r7
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	463b      	mov	r3, r7
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d909      	bls.n	8003f32 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003f1e:	463b      	mov	r3, r7
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f28:	1ad2      	subs	r2, r2, r3
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	621a      	str	r2, [r3, #32]
 8003f30:	e008      	b.n	8003f44 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f32:	463b      	mov	r3, r7
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d164      	bne.n	800401e <USB_EPStartXfer+0x6d6>
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	4413      	add	r3, r2
 8003f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	011a      	lsls	r2, r3, #4
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	4413      	add	r3, r2
 8003f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <USB_EPStartXfer+0x664>
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	e054      	b.n	8004056 <USB_EPStartXfer+0x70e>
 8003fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb2:	d817      	bhi.n	8003fe4 <USB_EPStartXfer+0x69c>
 8003fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <USB_EPStartXfer+0x68c>
 8003fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	029b      	lsls	r3, r3, #10
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	e038      	b.n	8004056 <USB_EPStartXfer+0x70e>
 8003fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <USB_EPStartXfer+0x6bc>
 8003ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ffe:	3b01      	subs	r3, #1
 8004000:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004004:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004008:	b29b      	uxth	r3, r3
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	b29b      	uxth	r3, r3
 800400e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004016:	b29a      	uxth	r2, r3
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	e01b      	b.n	8004056 <USB_EPStartXfer+0x70e>
 800401e:	463b      	mov	r3, r7
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d116      	bne.n	8004056 <USB_EPStartXfer+0x70e>
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004030:	b29b      	uxth	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004036:	4413      	add	r3, r2
 8004038:	643b      	str	r3, [r7, #64]	; 0x40
 800403a:	463b      	mov	r3, r7
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	011a      	lsls	r2, r3, #4
 8004042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004044:	4413      	add	r3, r2
 8004046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004050:	b29a      	uxth	r2, r3
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004056:	463b      	mov	r3, r7
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	895b      	ldrh	r3, [r3, #10]
 800405c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004060:	463b      	mov	r3, r7
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6959      	ldr	r1, [r3, #20]
 8004066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800406a:	b29b      	uxth	r3, r3
 800406c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004070:	1d38      	adds	r0, r7, #4
 8004072:	6800      	ldr	r0, [r0, #0]
 8004074:	f001 f89d 	bl	80051b2 <USB_WritePMA>
 8004078:	e36c      	b.n	8004754 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800407a:	463b      	mov	r3, r7
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	463b      	mov	r3, r7
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	463b      	mov	r3, r7
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80040b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040dc:	4413      	add	r3, r2
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e0:	463b      	mov	r3, r7
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	011a      	lsls	r2, r3, #4
 80040e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ea:	4413      	add	r3, r2
 80040ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040fc:	463b      	mov	r3, r7
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	891b      	ldrh	r3, [r3, #8]
 8004102:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004106:	463b      	mov	r3, r7
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6959      	ldr	r1, [r3, #20]
 800410c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004110:	b29b      	uxth	r3, r3
 8004112:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004116:	1d38      	adds	r0, r7, #4
 8004118:	6800      	ldr	r0, [r0, #0]
 800411a:	f001 f84a 	bl	80051b2 <USB_WritePMA>
 800411e:	e319      	b.n	8004754 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	463b      	mov	r3, r7
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	463b      	mov	r3, r7
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	441a      	add	r2, r3
 800414c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004158:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800415c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004160:	b29b      	uxth	r3, r3
 8004162:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004164:	463b      	mov	r3, r7
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	463b      	mov	r3, r7
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	463b      	mov	r3, r7
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8162 	beq.w	8004456 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800419a:	463b      	mov	r3, r7
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d164      	bne.n	800426e <USB_EPStartXfer+0x926>
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b8:	4413      	add	r3, r2
 80041ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80041bc:	463b      	mov	r3, r7
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	011a      	lsls	r2, r3, #4
 80041c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c6:	4413      	add	r3, r2
 80041c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041cc:	677b      	str	r3, [r7, #116]	; 0x74
 80041ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d112      	bne.n	80041fc <USB_EPStartXfer+0x8b4>
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	e057      	b.n	80042ac <USB_EPStartXfer+0x964>
 80041fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004200:	2b3e      	cmp	r3, #62	; 0x3e
 8004202:	d817      	bhi.n	8004234 <USB_EPStartXfer+0x8ec>
 8004204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800420e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <USB_EPStartXfer+0x8dc>
 800421a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800421e:	3301      	adds	r3, #1
 8004220:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004224:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004228:	b29b      	uxth	r3, r3
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	b29a      	uxth	r2, r3
 800422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	e03b      	b.n	80042ac <USB_EPStartXfer+0x964>
 8004234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800423e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <USB_EPStartXfer+0x90c>
 800424a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800424e:	3b01      	subs	r3, #1
 8004250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004254:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004258:	b29b      	uxth	r3, r3
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	b29b      	uxth	r3, r3
 800425e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004266:	b29a      	uxth	r2, r3
 8004268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	e01e      	b.n	80042ac <USB_EPStartXfer+0x964>
 800426e:	463b      	mov	r3, r7
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	785b      	ldrb	r3, [r3, #1]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d119      	bne.n	80042ac <USB_EPStartXfer+0x964>
 8004278:	1d3b      	adds	r3, r7, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004288:	4413      	add	r3, r2
 800428a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800428e:	463b      	mov	r3, r7
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800429a:	4413      	add	r3, r2
 800429c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80042ac:	463b      	mov	r3, r7
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	895b      	ldrh	r3, [r3, #10]
 80042b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042b6:	463b      	mov	r3, r7
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6959      	ldr	r1, [r3, #20]
 80042bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042c6:	1d38      	adds	r0, r7, #4
 80042c8:	6800      	ldr	r0, [r0, #0]
 80042ca:	f000 ff72 	bl	80051b2 <USB_WritePMA>
          ep->xfer_buff += len;
 80042ce:	463b      	mov	r3, r7
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d8:	441a      	add	r2, r3
 80042da:	463b      	mov	r3, r7
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80042e0:	463b      	mov	r3, r7
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	463b      	mov	r3, r7
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d909      	bls.n	8004304 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80042f0:	463b      	mov	r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	463b      	mov	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	621a      	str	r2, [r3, #32]
 8004302:	e008      	b.n	8004316 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004304:	463b      	mov	r3, r7
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800430e:	463b      	mov	r3, r7
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2200      	movs	r2, #0
 8004314:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 821a 	beq.w	8004754 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004320:	463b      	mov	r3, r7
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d164      	bne.n	80043f4 <USB_EPStartXfer+0xaac>
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004338:	b29b      	uxth	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800433e:	4413      	add	r3, r2
 8004340:	66bb      	str	r3, [r7, #104]	; 0x68
 8004342:	463b      	mov	r3, r7
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	011a      	lsls	r2, r3, #4
 800434a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800434c:	4413      	add	r3, r2
 800434e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004352:	667b      	str	r3, [r7, #100]	; 0x64
 8004354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d112      	bne.n	8004382 <USB_EPStartXfer+0xa3a>
 800435c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004366:	b29a      	uxth	r2, r3
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437a:	b29a      	uxth	r2, r3
 800437c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e057      	b.n	8004432 <USB_EPStartXfer+0xaea>
 8004382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004386:	2b3e      	cmp	r3, #62	; 0x3e
 8004388:	d817      	bhi.n	80043ba <USB_EPStartXfer+0xa72>
 800438a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <USB_EPStartXfer+0xa62>
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a4:	3301      	adds	r3, #1
 80043a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	029b      	lsls	r3, r3, #10
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	e03b      	b.n	8004432 <USB_EPStartXfer+0xaea>
 80043ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <USB_EPStartXfer+0xa92>
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d4:	3b01      	subs	r3, #1
 80043d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	b29b      	uxth	r3, r3
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	e01e      	b.n	8004432 <USB_EPStartXfer+0xaea>
 80043f4:	463b      	mov	r3, r7
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d119      	bne.n	8004432 <USB_EPStartXfer+0xaea>
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	673b      	str	r3, [r7, #112]	; 0x70
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004412:	4413      	add	r3, r2
 8004414:	673b      	str	r3, [r7, #112]	; 0x70
 8004416:	463b      	mov	r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	011a      	lsls	r2, r3, #4
 800441e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004420:	4413      	add	r3, r2
 8004422:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800442c:	b29a      	uxth	r2, r3
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004432:	463b      	mov	r3, r7
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	891b      	ldrh	r3, [r3, #8]
 8004438:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800443c:	463b      	mov	r3, r7
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6959      	ldr	r1, [r3, #20]
 8004442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004446:	b29b      	uxth	r3, r3
 8004448:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800444c:	1d38      	adds	r0, r7, #4
 800444e:	6800      	ldr	r0, [r0, #0]
 8004450:	f000 feaf 	bl	80051b2 <USB_WritePMA>
 8004454:	e17e      	b.n	8004754 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004456:	463b      	mov	r3, r7
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d16f      	bne.n	8004540 <USB_EPStartXfer+0xbf8>
 8004460:	1d3b      	adds	r3, r7, #4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004470:	b29b      	uxth	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004478:	4413      	add	r3, r2
 800447a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800447e:	463b      	mov	r3, r7
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	011a      	lsls	r2, r3, #4
 8004486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800448a:	4413      	add	r3, r2
 800448c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d116      	bne.n	80044ca <USB_EPStartXfer+0xb82>
 800449c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	e05f      	b.n	800458a <USB_EPStartXfer+0xc42>
 80044ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ce:	2b3e      	cmp	r3, #62	; 0x3e
 80044d0:	d818      	bhi.n	8004504 <USB_EPStartXfer+0xbbc>
 80044d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80044dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <USB_EPStartXfer+0xbaa>
 80044e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044ec:	3301      	adds	r3, #1
 80044ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80044f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	029b      	lsls	r3, r3, #10
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	e042      	b.n	800458a <USB_EPStartXfer+0xc42>
 8004504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800450e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <USB_EPStartXfer+0xbdc>
 800451a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800451e:	3b01      	subs	r3, #1
 8004520:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004524:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004528:	b29b      	uxth	r3, r3
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	b29b      	uxth	r3, r3
 800452e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004536:	b29a      	uxth	r2, r3
 8004538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e024      	b.n	800458a <USB_EPStartXfer+0xc42>
 8004540:	463b      	mov	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	785b      	ldrb	r3, [r3, #1]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d11f      	bne.n	800458a <USB_EPStartXfer+0xc42>
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004552:	1d3b      	adds	r3, r7, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455a:	b29b      	uxth	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004562:	4413      	add	r3, r2
 8004564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	011a      	lsls	r2, r3, #4
 8004570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004574:	4413      	add	r3, r2
 8004576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800457a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800457e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004582:	b29a      	uxth	r2, r3
 8004584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004588:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800458a:	463b      	mov	r3, r7
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	891b      	ldrh	r3, [r3, #8]
 8004590:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004594:	463b      	mov	r3, r7
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6959      	ldr	r1, [r3, #20]
 800459a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80045a4:	1d38      	adds	r0, r7, #4
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	f000 fe03 	bl	80051b2 <USB_WritePMA>
          ep->xfer_buff += len;
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045b6:	441a      	add	r2, r3
 80045b8:	463b      	mov	r3, r7
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80045be:	463b      	mov	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	463b      	mov	r3, r7
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d909      	bls.n	80045e2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80045ce:	463b      	mov	r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d8:	1ad2      	subs	r2, r2, r3
 80045da:	463b      	mov	r3, r7
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	621a      	str	r2, [r3, #32]
 80045e0:	e008      	b.n	80045f4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80045e2:	463b      	mov	r3, r7
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80045ec:	463b      	mov	r3, r7
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80045f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80ab 	beq.w	8004754 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004606:	463b      	mov	r3, r7
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d16f      	bne.n	80046f0 <USB_EPStartXfer+0xda8>
 8004610:	1d3b      	adds	r3, r7, #4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004628:	4413      	add	r3, r2
 800462a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800462e:	463b      	mov	r3, r7
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	011a      	lsls	r2, r3, #4
 8004636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800463a:	4413      	add	r3, r2
 800463c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d116      	bne.n	800467a <USB_EPStartXfer+0xd32>
 800464c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004658:	b29a      	uxth	r2, r3
 800465a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800466c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004670:	b29a      	uxth	r2, r3
 8004672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	e05b      	b.n	8004732 <USB_EPStartXfer+0xdea>
 800467a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800467e:	2b3e      	cmp	r3, #62	; 0x3e
 8004680:	d818      	bhi.n	80046b4 <USB_EPStartXfer+0xd6c>
 8004682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800468c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <USB_EPStartXfer+0xd5a>
 8004698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469c:	3301      	adds	r3, #1
 800469e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	029b      	lsls	r3, r3, #10
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	e03e      	b.n	8004732 <USB_EPStartXfer+0xdea>
 80046b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <USB_EPStartXfer+0xd8c>
 80046ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ce:	3b01      	subs	r3, #1
 80046d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d8:	b29b      	uxth	r3, r3
 80046da:	029b      	lsls	r3, r3, #10
 80046dc:	b29b      	uxth	r3, r3
 80046de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e020      	b.n	8004732 <USB_EPStartXfer+0xdea>
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d11b      	bne.n	8004732 <USB_EPStartXfer+0xdea>
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800470a:	4413      	add	r3, r2
 800470c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	011a      	lsls	r2, r3, #4
 8004718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800471c:	4413      	add	r3, r2
 800471e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472a:	b29a      	uxth	r2, r3
 800472c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004732:	463b      	mov	r3, r7
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	895b      	ldrh	r3, [r3, #10]
 8004738:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800473c:	463b      	mov	r3, r7
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6959      	ldr	r1, [r3, #20]
 8004742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004746:	b29b      	uxth	r3, r3
 8004748:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800474c:	1d38      	adds	r0, r7, #4
 800474e:	6800      	ldr	r0, [r0, #0]
 8004750:	f000 fd2f 	bl	80051b2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	463b      	mov	r3, r7
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f107 020a 	add.w	r2, r7, #10
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004772:	8013      	strh	r3, [r2, #0]
 8004774:	f107 030a 	add.w	r3, r7, #10
 8004778:	f107 020a 	add.w	r2, r7, #10
 800477c:	8812      	ldrh	r2, [r2, #0]
 800477e:	f082 0210 	eor.w	r2, r2, #16
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	f107 030a 	add.w	r3, r7, #10
 8004788:	f107 020a 	add.w	r2, r7, #10
 800478c:	8812      	ldrh	r2, [r2, #0]
 800478e:	f082 0220 	eor.w	r2, r2, #32
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	463b      	mov	r3, r7
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	f107 030a 	add.w	r3, r7, #10
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]
 80047bc:	e3b5      	b.n	8004f2a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80047be:	463b      	mov	r3, r7
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	7b1b      	ldrb	r3, [r3, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 8090 	bne.w	80048ea <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80047ca:	463b      	mov	r3, r7
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699a      	ldr	r2, [r3, #24]
 80047d0:	463b      	mov	r3, r7
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d90e      	bls.n	80047f8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80047da:	463b      	mov	r3, r7
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80047e4:	463b      	mov	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ee:	1ad2      	subs	r2, r2, r3
 80047f0:	463b      	mov	r3, r7
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	619a      	str	r2, [r3, #24]
 80047f6:	e008      	b.n	800480a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80047f8:	463b      	mov	r3, r7
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004802:	463b      	mov	r3, r7
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481a:	b29b      	uxth	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004822:	4413      	add	r3, r2
 8004824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004828:	463b      	mov	r3, r7
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	011a      	lsls	r2, r3, #4
 8004830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004834:	4413      	add	r3, r2
 8004836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800483a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800483e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <USB_EPStartXfer+0xf2c>
 8004846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004852:	b29a      	uxth	r2, r3
 8004854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29a      	uxth	r2, r3
 800486c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e32c      	b.n	8004ece <USB_EPStartXfer+0x1586>
 8004874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004878:	2b3e      	cmp	r3, #62	; 0x3e
 800487a:	d818      	bhi.n	80048ae <USB_EPStartXfer+0xf66>
 800487c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d004      	beq.n	800489c <USB_EPStartXfer+0xf54>
 8004892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004896:	3301      	adds	r3, #1
 8004898:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800489c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	e30f      	b.n	8004ece <USB_EPStartXfer+0x1586>
 80048ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <USB_EPStartXfer+0xf86>
 80048c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048c8:	3b01      	subs	r3, #1
 80048ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e2f1      	b.n	8004ece <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80048ea:	463b      	mov	r3, r7
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	78db      	ldrb	r3, [r3, #3]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	f040 818f 	bne.w	8004c14 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80048f6:	463b      	mov	r3, r7
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d175      	bne.n	80049ec <USB_EPStartXfer+0x10a4>
 8004900:	1d3b      	adds	r3, r7, #4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004910:	b29b      	uxth	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004918:	4413      	add	r3, r2
 800491a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	011a      	lsls	r2, r3, #4
 8004926:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800492a:	4413      	add	r3, r2
 800492c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004934:	463b      	mov	r3, r7
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d116      	bne.n	800496c <USB_EPStartXfer+0x1024>
 800493e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800494a:	b29a      	uxth	r2, r3
 800494c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004962:	b29a      	uxth	r2, r3
 8004964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	e065      	b.n	8004a38 <USB_EPStartXfer+0x10f0>
 800496c:	463b      	mov	r3, r7
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b3e      	cmp	r3, #62	; 0x3e
 8004974:	d81a      	bhi.n	80049ac <USB_EPStartXfer+0x1064>
 8004976:	463b      	mov	r3, r7
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <USB_EPStartXfer+0x1052>
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004994:	3301      	adds	r3, #1
 8004996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800499a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800499e:	b29b      	uxth	r3, r3
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	e045      	b.n	8004a38 <USB_EPStartXfer+0x10f0>
 80049ac:	463b      	mov	r3, r7
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049b8:	463b      	mov	r3, r7
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <USB_EPStartXfer+0x1088>
 80049c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ca:	3b01      	subs	r3, #1
 80049cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	029b      	lsls	r3, r3, #10
 80049d8:	b29b      	uxth	r3, r3
 80049da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	e025      	b.n	8004a38 <USB_EPStartXfer+0x10f0>
 80049ec:	463b      	mov	r3, r7
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d120      	bne.n	8004a38 <USB_EPStartXfer+0x10f0>
 80049f6:	1d3b      	adds	r3, r7, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0e:	4413      	add	r3, r2
 8004a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a14:	463b      	mov	r3, r7
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	011a      	lsls	r2, r3, #4
 8004a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a40:	463b      	mov	r3, r7
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d175      	bne.n	8004b36 <USB_EPStartXfer+0x11ee>
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a62:	4413      	add	r3, r2
 8004a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a68:	463b      	mov	r3, r7
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	011a      	lsls	r2, r3, #4
 8004a70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a74:	4413      	add	r3, r2
 8004a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a7e:	463b      	mov	r3, r7
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d116      	bne.n	8004ab6 <USB_EPStartXfer+0x116e>
 8004a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a9a:	801a      	strh	r2, [r3, #0]
 8004a9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	e061      	b.n	8004b7a <USB_EPStartXfer+0x1232>
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b3e      	cmp	r3, #62	; 0x3e
 8004abe:	d81a      	bhi.n	8004af6 <USB_EPStartXfer+0x11ae>
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004acc:	463b      	mov	r3, r7
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <USB_EPStartXfer+0x119c>
 8004ada:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ae4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	e041      	b.n	8004b7a <USB_EPStartXfer+0x1232>
 8004af6:	463b      	mov	r3, r7
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b02:	463b      	mov	r3, r7
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <USB_EPStartXfer+0x11d2>
 8004b10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b14:	3b01      	subs	r3, #1
 8004b16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	029b      	lsls	r3, r3, #10
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e021      	b.n	8004b7a <USB_EPStartXfer+0x1232>
 8004b36:	463b      	mov	r3, r7
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d11c      	bne.n	8004b7a <USB_EPStartXfer+0x1232>
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b50:	4413      	add	r3, r2
 8004b52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b56:	463b      	mov	r3, r7
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	011a      	lsls	r2, r3, #4
 8004b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b62:	4413      	add	r3, r2
 8004b64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b6c:	463b      	mov	r3, r7
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004b7a:	463b      	mov	r3, r7
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 81a4 	beq.w	8004ece <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b9a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <USB_EPStartXfer+0x126a>
 8004ba6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004bb2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 8187 	bne.w	8004ece <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004bc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 8180 	bne.w	8004ece <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004bce:	1d3b      	adds	r3, r7, #4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004bec:	1d3b      	adds	r3, r7, #4
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]
 8004c12:	e15c      	b.n	8004ece <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004c14:	463b      	mov	r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	78db      	ldrb	r3, [r3, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	f040 8155 	bne.w	8004eca <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	463b      	mov	r3, r7
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d90e      	bls.n	8004c4e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004c30:	463b      	mov	r3, r7
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004c3a:	463b      	mov	r3, r7
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c44:	1ad2      	subs	r2, r2, r3
 8004c46:	463b      	mov	r3, r7
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	619a      	str	r2, [r3, #24]
 8004c4c:	e008      	b.n	8004c60 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004c4e:	463b      	mov	r3, r7
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004c58:	463b      	mov	r3, r7
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c60:	463b      	mov	r3, r7
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d16f      	bne.n	8004d4a <USB_EPStartXfer+0x1402>
 8004c6a:	1d3b      	adds	r3, r7, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c82:	4413      	add	r3, r2
 8004c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	011a      	lsls	r2, r3, #4
 8004c90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c94:	4413      	add	r3, r2
 8004c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d116      	bne.n	8004cd4 <USB_EPStartXfer+0x138c>
 8004ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	e05f      	b.n	8004d94 <USB_EPStartXfer+0x144c>
 8004cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8004cda:	d818      	bhi.n	8004d0e <USB_EPStartXfer+0x13c6>
 8004cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <USB_EPStartXfer+0x13b4>
 8004cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	e042      	b.n	8004d94 <USB_EPStartXfer+0x144c>
 8004d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <USB_EPStartXfer+0x13e6>
 8004d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	e024      	b.n	8004d94 <USB_EPStartXfer+0x144c>
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d11f      	bne.n	8004d94 <USB_EPStartXfer+0x144c>
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d5c:	1d3b      	adds	r3, r7, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d72:	463b      	mov	r3, r7
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	011a      	lsls	r2, r3, #4
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7e:	4413      	add	r3, r2
 8004d80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d16f      	bne.n	8004e86 <USB_EPStartXfer+0x153e>
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	011a      	lsls	r2, r3, #4
 8004dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <USB_EPStartXfer+0x14c8>
 8004de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	e05e      	b.n	8004ece <USB_EPStartXfer+0x1586>
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	2b3e      	cmp	r3, #62	; 0x3e
 8004e16:	d818      	bhi.n	8004e4a <USB_EPStartXfer+0x1502>
 8004e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <USB_EPStartXfer+0x14f0>
 8004e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e32:	3301      	adds	r3, #1
 8004e34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e041      	b.n	8004ece <USB_EPStartXfer+0x1586>
 8004e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d104      	bne.n	8004e6a <USB_EPStartXfer+0x1522>
 8004e60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e64:	3b01      	subs	r3, #1
 8004e66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e023      	b.n	8004ece <USB_EPStartXfer+0x1586>
 8004e86:	463b      	mov	r3, r7
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d11e      	bne.n	8004ece <USB_EPStartXfer+0x1586>
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	011a      	lsls	r2, r3, #4
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	e001      	b.n	8004ece <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e02e      	b.n	8004f2c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004eec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004ef0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ef4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004ef8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004efc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f00:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f5e:	81bb      	strh	r3, [r7, #12]
 8004f60:	89bb      	ldrh	r3, [r7, #12]
 8004f62:	f083 0310 	eor.w	r3, r3, #16
 8004f66:	81bb      	strh	r3, [r7, #12]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	89bb      	ldrh	r3, [r7, #12]
 8004f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8013      	strh	r3, [r2, #0]
 8004f88:	e01f      	b.n	8004fca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	81fb      	strh	r3, [r7, #14]
 8004fa2:	89fb      	ldrh	r3, [r7, #14]
 8004fa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fa8:	81fb      	strh	r3, [r7, #14]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	7b1b      	ldrb	r3, [r3, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 809d 	bne.w	8005124 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04c      	beq.n	800508c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	823b      	strh	r3, [r7, #16]
 8005000:	8a3b      	ldrh	r3, [r7, #16]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01b      	beq.n	8005042 <USB_EPClearStall+0x6c>
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	81fb      	strh	r3, [r7, #14]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	89fb      	ldrh	r3, [r7, #14]
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	78db      	ldrb	r3, [r3, #3]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d06c      	beq.n	8005124 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005060:	81bb      	strh	r3, [r7, #12]
 8005062:	89bb      	ldrh	r3, [r7, #12]
 8005064:	f083 0320 	eor.w	r3, r3, #32
 8005068:	81bb      	strh	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	89bb      	ldrh	r3, [r7, #12]
 8005076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005086:	b29b      	uxth	r3, r3
 8005088:	8013      	strh	r3, [r2, #0]
 800508a:	e04b      	b.n	8005124 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	82fb      	strh	r3, [r7, #22]
 800509a:	8afb      	ldrh	r3, [r7, #22]
 800509c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <USB_EPClearStall+0x106>
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	82bb      	strh	r3, [r7, #20]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	8abb      	ldrh	r3, [r7, #20]
 80050c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	827b      	strh	r3, [r7, #18]
 80050f4:	8a7b      	ldrh	r3, [r7, #18]
 80050f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050fa:	827b      	strh	r3, [r7, #18]
 80050fc:	8a7b      	ldrh	r3, [r7, #18]
 80050fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005102:	827b      	strh	r3, [r7, #18]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	441a      	add	r2, r3
 800510e:	8a7b      	ldrh	r3, [r7, #18]
 8005110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005120:	b29b      	uxth	r3, r3
 8005122:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr

08005130 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800518c:	b29b      	uxth	r3, r3
 800518e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b08d      	sub	sp, #52	; 0x34
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	4611      	mov	r1, r2
 80051be:	461a      	mov	r2, r3
 80051c0:	460b      	mov	r3, r1
 80051c2:	80fb      	strh	r3, [r7, #6]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051c8:	88bb      	ldrh	r3, [r7, #4]
 80051ca:	3301      	adds	r3, #1
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	005a      	lsls	r2, r3, #1
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	e01e      	b.n	800522a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	3301      	adds	r3, #1
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	b29a      	uxth	r2, r3
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	3302      	adds	r3, #2
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	3302      	adds	r3, #2
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	3301      	adds	r3, #1
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	3b01      	subs	r3, #1
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1dd      	bne.n	80051ec <USB_WritePMA+0x3a>
  }
}
 8005230:	bf00      	nop
 8005232:	3734      	adds	r7, #52	; 0x34
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800523a:	b480      	push	{r7}
 800523c:	b08b      	sub	sp, #44	; 0x2c
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	4611      	mov	r1, r2
 8005246:	461a      	mov	r2, r3
 8005248:	460b      	mov	r3, r1
 800524a:	80fb      	strh	r3, [r7, #6]
 800524c:	4613      	mov	r3, r2
 800524e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005250:	88bb      	ldrh	r3, [r7, #4]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	b29b      	uxth	r3, r3
 8005256:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	005a      	lsls	r2, r3, #1
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
 8005272:	e01b      	b.n	80052ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	3302      	adds	r3, #2
 8005280:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3301      	adds	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	b2da      	uxtb	r2, r3
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3301      	adds	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	3302      	adds	r3, #2
 80052a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	3b01      	subs	r3, #1
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e0      	bne.n	8005274 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80052b2:	88bb      	ldrh	r3, [r7, #4]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	701a      	strb	r2, [r3, #0]
  }
}
 80052ce:	bf00      	nop
 80052d0:	372c      	adds	r7, #44	; 0x2c
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr

080052d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80052e4:	2304      	movs	r3, #4
 80052e6:	2203      	movs	r2, #3
 80052e8:	2181      	movs	r1, #129	; 0x81
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 fc75 	bl	8006bda <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80052f6:	2010      	movs	r0, #16
 80052f8:	f001 fd84 	bl	8006e04 <USBD_static_malloc>
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800530e:	2302      	movs	r3, #2
 8005310:	e005      	b.n	800531e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005318:	2200      	movs	r2, #0
 800531a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005332:	2181      	movs	r1, #129	; 0x81
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 fc76 	bl	8006c26 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005350:	4618      	mov	r0, r3
 8005352:	f001 fd63 	bl	8006e1c <USBD_static_free>
    pdev->pClassData = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005378:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005392:	2b00      	cmp	r3, #0
 8005394:	d045      	beq.n	8005422 <USBD_HID_Setup+0xba>
 8005396:	2b20      	cmp	r3, #32
 8005398:	f040 80d3 	bne.w	8005542 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	3b02      	subs	r3, #2
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	d835      	bhi.n	8005412 <USBD_HID_Setup+0xaa>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <USBD_HID_Setup+0x44>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	08005403 	.word	0x08005403
 80053b0:	080053e3 	.word	0x080053e3
 80053b4:	08005413 	.word	0x08005413
 80053b8:	08005413 	.word	0x08005413
 80053bc:	08005413 	.word	0x08005413
 80053c0:	08005413 	.word	0x08005413
 80053c4:	08005413 	.word	0x08005413
 80053c8:	08005413 	.word	0x08005413
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053d5 	.word	0x080053d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	885b      	ldrh	r3, [r3, #2]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	601a      	str	r2, [r3, #0]
          break;
 80053e0:	e01e      	b.n	8005420 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2201      	movs	r2, #1
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 f937 	bl	800665c <USBD_CtlSendData>
          break;
 80053ee:	e017      	b.n	8005420 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	885b      	ldrh	r3, [r3, #2]
 80053f4:	0a1b      	lsrs	r3, r3, #8
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]
          break;
 8005400:	e00e      	b.n	8005420 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3304      	adds	r3, #4
 8005406:	2201      	movs	r2, #1
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 f926 	bl	800665c <USBD_CtlSendData>
          break;
 8005410:	e006      	b.n	8005420 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 f8b7 	bl	8006588 <USBD_CtlError>
          ret = USBD_FAIL;
 800541a:	2302      	movs	r3, #2
 800541c:	75fb      	strb	r3, [r7, #23]
          break;
 800541e:	bf00      	nop
      }
      break;
 8005420:	e096      	b.n	8005550 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b0b      	cmp	r3, #11
 8005428:	f200 8083 	bhi.w	8005532 <USBD_HID_Setup+0x1ca>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <USBD_HID_Setup+0xcc>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005465 	.word	0x08005465
 8005438:	08005533 	.word	0x08005533
 800543c:	08005533 	.word	0x08005533
 8005440:	08005533 	.word	0x08005533
 8005444:	08005533 	.word	0x08005533
 8005448:	08005533 	.word	0x08005533
 800544c:	0800548d 	.word	0x0800548d
 8005450:	08005533 	.word	0x08005533
 8005454:	08005533 	.word	0x08005533
 8005458:	08005533 	.word	0x08005533
 800545c:	080054e5 	.word	0x080054e5
 8005460:	0800550d 	.word	0x0800550d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800546a:	2b03      	cmp	r3, #3
 800546c:	d107      	bne.n	800547e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800546e:	f107 030e 	add.w	r3, r7, #14
 8005472:	2202      	movs	r2, #2
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 f8f0 	bl	800665c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800547c:	e060      	b.n	8005540 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 f881 	bl	8006588 <USBD_CtlError>
            ret = USBD_FAIL;
 8005486:	2302      	movs	r3, #2
 8005488:	75fb      	strb	r3, [r7, #23]
          break;
 800548a:	e059      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	885b      	ldrh	r3, [r3, #2]
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b22      	cmp	r3, #34	; 0x22
 8005496:	d108      	bne.n	80054aa <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	88db      	ldrh	r3, [r3, #6]
 800549c:	2b4a      	cmp	r3, #74	; 0x4a
 800549e:	bf28      	it	cs
 80054a0:	234a      	movcs	r3, #74	; 0x4a
 80054a2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80054a4:	4b2d      	ldr	r3, [pc, #180]	; (800555c <USBD_HID_Setup+0x1f4>)
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e015      	b.n	80054d6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	885b      	ldrh	r3, [r3, #2]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b21      	cmp	r3, #33	; 0x21
 80054b4:	d108      	bne.n	80054c8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80054b6:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <USBD_HID_Setup+0x1f8>)
 80054b8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	88db      	ldrh	r3, [r3, #6]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	bf28      	it	cs
 80054c2:	2309      	movcs	r3, #9
 80054c4:	83fb      	strh	r3, [r7, #30]
 80054c6:	e006      	b.n	80054d6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f85c 	bl	8006588 <USBD_CtlError>
            ret = USBD_FAIL;
 80054d0:	2302      	movs	r3, #2
 80054d2:	75fb      	strb	r3, [r7, #23]
            break;
 80054d4:	e034      	b.n	8005540 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80054d6:	8bfb      	ldrh	r3, [r7, #30]
 80054d8:	461a      	mov	r2, r3
 80054da:	69b9      	ldr	r1, [r7, #24]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f8bd 	bl	800665c <USBD_CtlSendData>
          break;
 80054e2:	e02d      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3308      	adds	r3, #8
 80054f2:	2201      	movs	r2, #1
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 f8b0 	bl	800665c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054fc:	e020      	b.n	8005540 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 f841 	bl	8006588 <USBD_CtlError>
            ret = USBD_FAIL;
 8005506:	2302      	movs	r3, #2
 8005508:	75fb      	strb	r3, [r7, #23]
          break;
 800550a:	e019      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	2b03      	cmp	r3, #3
 8005514:	d106      	bne.n	8005524 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	885b      	ldrh	r3, [r3, #2]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005522:	e00d      	b.n	8005540 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 f82e 	bl	8006588 <USBD_CtlError>
            ret = USBD_FAIL;
 800552c:	2302      	movs	r3, #2
 800552e:	75fb      	strb	r3, [r7, #23]
          break;
 8005530:	e006      	b.n	8005540 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 f827 	bl	8006588 <USBD_CtlError>
          ret = USBD_FAIL;
 800553a:	2302      	movs	r3, #2
 800553c:	75fb      	strb	r3, [r7, #23]
          break;
 800553e:	bf00      	nop
      }
      break;
 8005540:	e006      	b.n	8005550 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 f81f 	bl	8006588 <USBD_CtlError>
      ret = USBD_FAIL;
 800554a:	2302      	movs	r3, #2
 800554c:	75fb      	strb	r3, [r7, #23]
      break;
 800554e:	bf00      	nop
  }

  return ret;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	200000c8 	.word	0x200000c8
 8005560:	200000b0 	.word	0x200000b0

08005564 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005578:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005580:	2b03      	cmp	r3, #3
 8005582:	d10c      	bne.n	800559e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	7b1b      	ldrb	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2201      	movs	r2, #1
 8005590:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	2181      	movs	r1, #129	; 0x81
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f001 fbec 	bl	8006d76 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2222      	movs	r2, #34	; 0x22
 80055b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80055b6:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	20000044 	.word	0x20000044

080055c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2222      	movs	r2, #34	; 0x22
 80055d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80055d6:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000068 	.word	0x20000068

080055e8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2222      	movs	r2, #34	; 0x22
 80055f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80055f6:	4b03      	ldr	r3, [pc, #12]	; (8005604 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000008c 	.word	0x2000008c

08005608 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561a:	2200      	movs	r2, #0
 800561c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
	...

0800562c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	220a      	movs	r2, #10
 8005638:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800563a:	4b03      	ldr	r3, [pc, #12]	; (8005648 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	200000bc 	.word	0x200000bc

0800564c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005660:	2302      	movs	r3, #2
 8005662:	e01a      	b.n	800569a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	79fa      	ldrb	r2, [r7, #7]
 8005690:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f001 fa3e 	bl	8006b14 <USBD_LL_Init>

  return USBD_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e001      	b.n	80056c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80056c4:	2302      	movs	r3, #2
 80056c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fa61 	bl	8006ba4 <USBD_LL_Start>

  return USBD_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800570c:	2302      	movs	r3, #2
 800570e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	78fa      	ldrb	r2, [r7, #3]
 8005724:	4611      	mov	r1, r2
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	4611      	mov	r1, r2
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	4798      	blx	r3

  return USBD_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 feca 	bl	8006510 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2b01      	cmp	r3, #1
 800579e:	d00c      	beq.n	80057ba <USBD_LL_SetupStage+0x56>
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d302      	bcc.n	80057aa <USBD_LL_SetupStage+0x46>
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d010      	beq.n	80057ca <USBD_LL_SetupStage+0x66>
 80057a8:	e017      	b.n	80057da <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9ca 	bl	8005b4c <USBD_StdDevReq>
      break;
 80057b8:	e01a      	b.n	80057f0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa2c 	bl	8005c20 <USBD_StdItfReq>
      break;
 80057c8:	e012      	b.n	80057f0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa6a 	bl	8005cac <USBD_StdEPReq>
      break;
 80057d8:	e00a      	b.n	80057f0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fa3b 	bl	8006c64 <USBD_LL_StallEP>
      break;
 80057ee:	bf00      	nop
  }

  return USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	460b      	mov	r3, r1
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d14b      	bne.n	80058a6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005814:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800581c:	2b03      	cmp	r3, #3
 800581e:	d134      	bne.n	800588a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	429a      	cmp	r2, r3
 800582a:	d919      	bls.n	8005860 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	1ad2      	subs	r2, r2, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005842:	429a      	cmp	r2, r3
 8005844:	d203      	bcs.n	800584e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800584a:	b29b      	uxth	r3, r3
 800584c:	e002      	b.n	8005854 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 ff2d 	bl	80066b8 <USBD_CtlContinueRx>
 800585e:	e038      	b.n	80058d2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005872:	2b03      	cmp	r3, #3
 8005874:	d105      	bne.n	8005882 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 ff2a 	bl	80066dc <USBD_CtlSendStatus>
 8005888:	e023      	b.n	80058d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005890:	2b05      	cmp	r3, #5
 8005892:	d11e      	bne.n	80058d2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800589c:	2100      	movs	r1, #0
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f001 f9e0 	bl	8006c64 <USBD_LL_StallEP>
 80058a4:	e015      	b.n	80058d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d108      	bne.n	80058ce <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	7afa      	ldrb	r2, [r7, #11]
 80058c6:	4611      	mov	r1, r2
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	4798      	blx	r3
 80058cc:	e001      	b.n	80058d2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80058ce:	2302      	movs	r3, #2
 80058d0:	e000      	b.n	80058d4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	460b      	mov	r3, r1
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d17f      	bne.n	80059f0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3314      	adds	r3, #20
 80058f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d15c      	bne.n	80059ba <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	d915      	bls.n	8005938 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	1ad2      	subs	r2, r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	b29b      	uxth	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 feb5 	bl	8006694 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800592a:	2300      	movs	r3, #0
 800592c:	2200      	movs	r2, #0
 800592e:	2100      	movs	r1, #0
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f001 fa43 	bl	8006dbc <USBD_LL_PrepareReceive>
 8005936:	e04e      	b.n	80059d6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	6912      	ldr	r2, [r2, #16]
 8005940:	fbb3 f1f2 	udiv	r1, r3, r2
 8005944:	fb02 f201 	mul.w	r2, r2, r1
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d11c      	bne.n	8005988 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005956:	429a      	cmp	r2, r3
 8005958:	d316      	bcc.n	8005988 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005964:	429a      	cmp	r2, r3
 8005966:	d20f      	bcs.n	8005988 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005968:	2200      	movs	r2, #0
 800596a:	2100      	movs	r1, #0
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fe91 	bl	8006694 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800597a:	2300      	movs	r3, #0
 800597c:	2200      	movs	r2, #0
 800597e:	2100      	movs	r1, #0
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 fa1b 	bl	8006dbc <USBD_LL_PrepareReceive>
 8005986:	e026      	b.n	80059d6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800599a:	2b03      	cmp	r3, #3
 800599c:	d105      	bne.n	80059aa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80059aa:	2180      	movs	r1, #128	; 0x80
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f001 f959 	bl	8006c64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fea5 	bl	8006702 <USBD_CtlReceiveStatus>
 80059b8:	e00d      	b.n	80059d6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d004      	beq.n	80059ce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f001 f947 	bl	8006c64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d11d      	bne.n	8005a1c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff fe83 	bl	80056ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80059ee:	e015      	b.n	8005a1c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00d      	beq.n	8005a18 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d108      	bne.n	8005a18 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	7afa      	ldrb	r2, [r7, #11]
 8005a10:	4611      	mov	r1, r2
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	4798      	blx	r3
 8005a16:	e001      	b.n	8005a1c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e000      	b.n	8005a1e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	2200      	movs	r2, #0
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 f8d0 	bl	8006bda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2240      	movs	r2, #64	; 0x40
 8005a46:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 f8c2 	bl	8006bda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2240      	movs	r2, #64	; 0x40
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6852      	ldr	r2, [r2, #4]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	4611      	mov	r1, r2
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
  }

  return USBD_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2204      	movs	r2, #4
 8005ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr

08005aee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d105      	bne.n	8005b0c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d10b      	bne.n	8005b42 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d004      	beq.n	8005b70 <USBD_StdDevReq+0x24>
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d002      	beq.n	8005b70 <USBD_StdDevReq+0x24>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <USBD_StdDevReq+0x34>
 8005b6e:	e04c      	b.n	8005c0a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
      break;
 8005b7e:	e049      	b.n	8005c14 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b09      	cmp	r3, #9
 8005b86:	d83a      	bhi.n	8005bfe <USBD_StdDevReq+0xb2>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <USBD_StdDevReq+0x44>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005be1 	.word	0x08005be1
 8005b94:	08005bf5 	.word	0x08005bf5
 8005b98:	08005bff 	.word	0x08005bff
 8005b9c:	08005beb 	.word	0x08005beb
 8005ba0:	08005bff 	.word	0x08005bff
 8005ba4:	08005bc3 	.word	0x08005bc3
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005bff 	.word	0x08005bff
 8005bb0:	08005bd7 	.word	0x08005bd7
 8005bb4:	08005bcd 	.word	0x08005bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9d4 	bl	8005f68 <USBD_GetDescriptor>
          break;
 8005bc0:	e022      	b.n	8005c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb37 	bl	8006238 <USBD_SetAddress>
          break;
 8005bca:	e01d      	b.n	8005c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fb74 	bl	80062bc <USBD_SetConfig>
          break;
 8005bd4:	e018      	b.n	8005c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fbfd 	bl	80063d8 <USBD_GetConfig>
          break;
 8005bde:	e013      	b.n	8005c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fc2c 	bl	8006440 <USBD_GetStatus>
          break;
 8005be8:	e00e      	b.n	8005c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fc5a 	bl	80064a6 <USBD_SetFeature>
          break;
 8005bf2:	e009      	b.n	8005c08 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fc69 	bl	80064ce <USBD_ClrFeature>
          break;
 8005bfc:	e004      	b.n	8005c08 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fcc1 	bl	8006588 <USBD_CtlError>
          break;
 8005c06:	bf00      	nop
      }
      break;
 8005c08:	e004      	b.n	8005c14 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fcbb 	bl	8006588 <USBD_CtlError>
      break;
 8005c12:	bf00      	nop
  }

  return ret;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop

08005c20 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d003      	beq.n	8005c42 <USBD_StdItfReq+0x22>
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d001      	beq.n	8005c42 <USBD_StdItfReq+0x22>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d12a      	bne.n	8005c98 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d81d      	bhi.n	8005c8a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	889b      	ldrh	r3, [r3, #4]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d813      	bhi.n	8005c80 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	88db      	ldrh	r3, [r3, #6]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d110      	bne.n	8005c94 <USBD_StdItfReq+0x74>
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10d      	bne.n	8005c94 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fd2f 	bl	80066dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c7e:	e009      	b.n	8005c94 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fc80 	bl	8006588 <USBD_CtlError>
          break;
 8005c88:	e004      	b.n	8005c94 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc7b 	bl	8006588 <USBD_CtlError>
          break;
 8005c92:	e000      	b.n	8005c96 <USBD_StdItfReq+0x76>
          break;
 8005c94:	bf00      	nop
      }
      break;
 8005c96:	e004      	b.n	8005ca2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fc74 	bl	8006588 <USBD_CtlError>
      break;
 8005ca0:	bf00      	nop
  }

  return USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	889b      	ldrh	r3, [r3, #4]
 8005cbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d004      	beq.n	8005cd6 <USBD_StdEPReq+0x2a>
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d002      	beq.n	8005cd6 <USBD_StdEPReq+0x2a>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <USBD_StdEPReq+0x3a>
 8005cd4:	e13d      	b.n	8005f52 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	4798      	blx	r3
      break;
 8005ce4:	e13a      	b.n	8005f5c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d10a      	bne.n	8005d08 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	e12a      	b.n	8005f5e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d03e      	beq.n	8005d8e <USBD_StdEPReq+0xe2>
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d002      	beq.n	8005d1a <USBD_StdEPReq+0x6e>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d070      	beq.n	8005dfa <USBD_StdEPReq+0x14e>
 8005d18:	e115      	b.n	8005f46 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d002      	beq.n	8005d2a <USBD_StdEPReq+0x7e>
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d015      	beq.n	8005d54 <USBD_StdEPReq+0xa8>
 8005d28:	e02b      	b.n	8005d82 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00c      	beq.n	8005d4a <USBD_StdEPReq+0x9e>
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	2b80      	cmp	r3, #128	; 0x80
 8005d34:	d009      	beq.n	8005d4a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 ff92 	bl	8006c64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 ff8e 	bl	8006c64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d48:	e020      	b.n	8005d8c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fc1b 	bl	8006588 <USBD_CtlError>
              break;
 8005d52:	e01b      	b.n	8005d8c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	885b      	ldrh	r3, [r3, #2]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10e      	bne.n	8005d7a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005d5c:	7bbb      	ldrb	r3, [r7, #14]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <USBD_StdEPReq+0xce>
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	2b80      	cmp	r3, #128	; 0x80
 8005d66:	d008      	beq.n	8005d7a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	88db      	ldrh	r3, [r3, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 ff75 	bl	8006c64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fcae 	bl	80066dc <USBD_CtlSendStatus>

              break;
 8005d80:	e004      	b.n	8005d8c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fbff 	bl	8006588 <USBD_CtlError>
              break;
 8005d8a:	bf00      	nop
          }
          break;
 8005d8c:	e0e0      	b.n	8005f50 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d002      	beq.n	8005d9e <USBD_StdEPReq+0xf2>
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d015      	beq.n	8005dc8 <USBD_StdEPReq+0x11c>
 8005d9c:	e026      	b.n	8005dec <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00c      	beq.n	8005dbe <USBD_StdEPReq+0x112>
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	2b80      	cmp	r3, #128	; 0x80
 8005da8:	d009      	beq.n	8005dbe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005daa:	7bbb      	ldrb	r3, [r7, #14]
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 ff58 	bl	8006c64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005db4:	2180      	movs	r1, #128	; 0x80
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 ff54 	bl	8006c64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005dbc:	e01c      	b.n	8005df8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fbe1 	bl	8006588 <USBD_CtlError>
              break;
 8005dc6:	e017      	b.n	8005df8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	885b      	ldrh	r3, [r3, #2]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d112      	bne.n	8005df6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 ff5f 	bl	8006ca2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fc79 	bl	80066dc <USBD_CtlSendStatus>
              }
              break;
 8005dea:	e004      	b.n	8005df6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fbca 	bl	8006588 <USBD_CtlError>
              break;
 8005df4:	e000      	b.n	8005df8 <USBD_StdEPReq+0x14c>
              break;
 8005df6:	bf00      	nop
          }
          break;
 8005df8:	e0aa      	b.n	8005f50 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d002      	beq.n	8005e0a <USBD_StdEPReq+0x15e>
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d032      	beq.n	8005e6e <USBD_StdEPReq+0x1c2>
 8005e08:	e097      	b.n	8005f3a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <USBD_StdEPReq+0x174>
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d004      	beq.n	8005e20 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fbb5 	bl	8006588 <USBD_CtlError>
                break;
 8005e1e:	e091      	b.n	8005f44 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da0b      	bge.n	8005e40 <USBD_StdEPReq+0x194>
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	3310      	adds	r3, #16
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	e00b      	b.n	8005e58 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	4413      	add	r3, r2
 8005e56:	3304      	adds	r3, #4
 8005e58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2202      	movs	r2, #2
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fbf8 	bl	800665c <USBD_CtlSendData>
              break;
 8005e6c:	e06a      	b.n	8005f44 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da11      	bge.n	8005e9a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	3318      	adds	r3, #24
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d117      	bne.n	8005ec0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb78 	bl	8006588 <USBD_CtlError>
                  break;
 8005e98:	e054      	b.n	8005f44 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e9a:	7bbb      	ldrb	r3, [r7, #14]
 8005e9c:	f003 020f 	and.w	r2, r3, #15
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fb65 	bl	8006588 <USBD_CtlError>
                  break;
 8005ebe:	e041      	b.n	8005f44 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	da0b      	bge.n	8005ee0 <USBD_StdEPReq+0x234>
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	3310      	adds	r3, #16
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4413      	add	r3, r2
 8005edc:	3304      	adds	r3, #4
 8005ede:	e00b      	b.n	8005ef8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <USBD_StdEPReq+0x25a>
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d103      	bne.n	8005f0e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e00e      	b.n	8005f2c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fee4 	bl	8006ce0 <USBD_LL_IsStallEP>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e002      	b.n	8005f2c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fb92 	bl	800665c <USBD_CtlSendData>
              break;
 8005f38:	e004      	b.n	8005f44 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fb23 	bl	8006588 <USBD_CtlError>
              break;
 8005f42:	bf00      	nop
          }
          break;
 8005f44:	e004      	b.n	8005f50 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fb1d 	bl	8006588 <USBD_CtlError>
          break;
 8005f4e:	bf00      	nop
      }
      break;
 8005f50:	e004      	b.n	8005f5c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fb17 	bl	8006588 <USBD_CtlError>
      break;
 8005f5a:	bf00      	nop
  }

  return ret;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	885b      	ldrh	r3, [r3, #2]
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	2b06      	cmp	r3, #6
 8005f8a:	f200 8128 	bhi.w	80061de <USBD_GetDescriptor+0x276>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <USBD_GetDescriptor+0x2c>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fb1 	.word	0x08005fb1
 8005f98:	08005fc9 	.word	0x08005fc9
 8005f9c:	08006009 	.word	0x08006009
 8005fa0:	080061df 	.word	0x080061df
 8005fa4:	080061df 	.word	0x080061df
 8005fa8:	0800617f 	.word	0x0800617f
 8005fac:	080061ab 	.word	0x080061ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	7c12      	ldrb	r2, [r2, #16]
 8005fbc:	f107 0108 	add.w	r1, r7, #8
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4798      	blx	r3
 8005fc4:	60f8      	str	r0, [r7, #12]
      break;
 8005fc6:	e112      	b.n	80061ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7c1b      	ldrb	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	f107 0208 	add.w	r2, r7, #8
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
 8005fe0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005fea:	e100      	b.n	80061ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	f107 0208 	add.w	r2, r7, #8
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4798      	blx	r3
 8005ffc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	2202      	movs	r2, #2
 8006004:	701a      	strb	r2, [r3, #0]
      break;
 8006006:	e0f2      	b.n	80061ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	885b      	ldrh	r3, [r3, #2]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b05      	cmp	r3, #5
 8006010:	f200 80ac 	bhi.w	800616c <USBD_GetDescriptor+0x204>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <USBD_GetDescriptor+0xb4>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006035 	.word	0x08006035
 8006020:	08006069 	.word	0x08006069
 8006024:	0800609d 	.word	0x0800609d
 8006028:	080060d1 	.word	0x080060d1
 800602c:	08006105 	.word	0x08006105
 8006030:	08006139 	.word	0x08006139
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	7c12      	ldrb	r2, [r2, #16]
 800604c:	f107 0108 	add.w	r1, r7, #8
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
 8006054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006056:	e091      	b.n	800617c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa94 	bl	8006588 <USBD_CtlError>
            err++;
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	3301      	adds	r3, #1
 8006064:	72fb      	strb	r3, [r7, #11]
          break;
 8006066:	e089      	b.n	800617c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	7c12      	ldrb	r2, [r2, #16]
 8006080:	f107 0108 	add.w	r1, r7, #8
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
 8006088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800608a:	e077      	b.n	800617c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa7a 	bl	8006588 <USBD_CtlError>
            err++;
 8006094:	7afb      	ldrb	r3, [r7, #11]
 8006096:	3301      	adds	r3, #1
 8006098:	72fb      	strb	r3, [r7, #11]
          break;
 800609a:	e06f      	b.n	800617c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	7c12      	ldrb	r2, [r2, #16]
 80060b4:	f107 0108 	add.w	r1, r7, #8
 80060b8:	4610      	mov	r0, r2
 80060ba:	4798      	blx	r3
 80060bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060be:	e05d      	b.n	800617c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fa60 	bl	8006588 <USBD_CtlError>
            err++;
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	3301      	adds	r3, #1
 80060cc:	72fb      	strb	r3, [r7, #11]
          break;
 80060ce:	e055      	b.n	800617c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	7c12      	ldrb	r2, [r2, #16]
 80060e8:	f107 0108 	add.w	r1, r7, #8
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
 80060f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060f2:	e043      	b.n	800617c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa46 	bl	8006588 <USBD_CtlError>
            err++;
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	3301      	adds	r3, #1
 8006100:	72fb      	strb	r3, [r7, #11]
          break;
 8006102:	e03b      	b.n	800617c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	7c12      	ldrb	r2, [r2, #16]
 800611c:	f107 0108 	add.w	r1, r7, #8
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
 8006124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006126:	e029      	b.n	800617c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa2c 	bl	8006588 <USBD_CtlError>
            err++;
 8006130:	7afb      	ldrb	r3, [r7, #11]
 8006132:	3301      	adds	r3, #1
 8006134:	72fb      	strb	r3, [r7, #11]
          break;
 8006136:	e021      	b.n	800617c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	7c12      	ldrb	r2, [r2, #16]
 8006150:	f107 0108 	add.w	r1, r7, #8
 8006154:	4610      	mov	r0, r2
 8006156:	4798      	blx	r3
 8006158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800615a:	e00f      	b.n	800617c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fa12 	bl	8006588 <USBD_CtlError>
            err++;
 8006164:	7afb      	ldrb	r3, [r7, #11]
 8006166:	3301      	adds	r3, #1
 8006168:	72fb      	strb	r3, [r7, #11]
          break;
 800616a:	e007      	b.n	800617c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa0a 	bl	8006588 <USBD_CtlError>
          err++;
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	3301      	adds	r3, #1
 8006178:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800617a:	e038      	b.n	80061ee <USBD_GetDescriptor+0x286>
 800617c:	e037      	b.n	80061ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7c1b      	ldrb	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	f107 0208 	add.w	r2, r7, #8
 8006192:	4610      	mov	r0, r2
 8006194:	4798      	blx	r3
 8006196:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006198:	e029      	b.n	80061ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f9f3 	bl	8006588 <USBD_CtlError>
        err++;
 80061a2:	7afb      	ldrb	r3, [r7, #11]
 80061a4:	3301      	adds	r3, #1
 80061a6:	72fb      	strb	r3, [r7, #11]
      break;
 80061a8:	e021      	b.n	80061ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	7c1b      	ldrb	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10d      	bne.n	80061ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f107 0208 	add.w	r2, r7, #8
 80061be:	4610      	mov	r0, r2
 80061c0:	4798      	blx	r3
 80061c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	2207      	movs	r2, #7
 80061ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061cc:	e00f      	b.n	80061ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f9d9 	bl	8006588 <USBD_CtlError>
        err++;
 80061d6:	7afb      	ldrb	r3, [r7, #11]
 80061d8:	3301      	adds	r3, #1
 80061da:	72fb      	strb	r3, [r7, #11]
      break;
 80061dc:	e007      	b.n	80061ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9d1 	bl	8006588 <USBD_CtlError>
      err++;
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	3301      	adds	r3, #1
 80061ea:	72fb      	strb	r3, [r7, #11]
      break;
 80061ec:	bf00      	nop
  }

  if (err != 0U)
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d11c      	bne.n	800622e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80061f4:	893b      	ldrh	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d011      	beq.n	800621e <USBD_GetDescriptor+0x2b6>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	88db      	ldrh	r3, [r3, #6]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00d      	beq.n	800621e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88da      	ldrh	r2, [r3, #6]
 8006206:	893b      	ldrh	r3, [r7, #8]
 8006208:	4293      	cmp	r3, r2
 800620a:	bf28      	it	cs
 800620c:	4613      	movcs	r3, r2
 800620e:	b29b      	uxth	r3, r3
 8006210:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006212:	893b      	ldrh	r3, [r7, #8]
 8006214:	461a      	mov	r2, r3
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa1f 	bl	800665c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa58 	bl	80066dc <USBD_CtlSendStatus>
 800622c:	e000      	b.n	8006230 <USBD_GetDescriptor+0x2c8>
    return;
 800622e:	bf00      	nop
    }
  }
}
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop

08006238 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	889b      	ldrh	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d130      	bne.n	80062ac <USBD_SetAddress+0x74>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d12c      	bne.n	80062ac <USBD_SetAddress+0x74>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	885b      	ldrh	r3, [r3, #2]
 8006256:	2b7f      	cmp	r3, #127	; 0x7f
 8006258:	d828      	bhi.n	80062ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	885b      	ldrh	r3, [r3, #2]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626c:	2b03      	cmp	r3, #3
 800626e:	d104      	bne.n	800627a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f988 	bl	8006588 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006278:	e01c      	b.n	80062b4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fd56 	bl	8006d38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa25 	bl	80066dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a0:	e008      	b.n	80062b4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062aa:	e003      	b.n	80062b4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f96a 	bl	8006588 <USBD_CtlError>
  }
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	885b      	ldrh	r3, [r3, #2]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <USBD_SetConfig+0x118>)
 80062ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062d0:	4b40      	ldr	r3, [pc, #256]	; (80063d4 <USBD_SetConfig+0x118>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d904      	bls.n	80062e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f954 	bl	8006588 <USBD_CtlError>
 80062e0:	e075      	b.n	80063ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d002      	beq.n	80062f2 <USBD_SetConfig+0x36>
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d023      	beq.n	8006338 <USBD_SetConfig+0x7c>
 80062f0:	e062      	b.n	80063b8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80062f2:	4b38      	ldr	r3, [pc, #224]	; (80063d4 <USBD_SetConfig+0x118>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01a      	beq.n	8006330 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80062fa:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <USBD_SetConfig+0x118>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2203      	movs	r2, #3
 8006308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800630c:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <USBD_SetConfig+0x118>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff f9f4 	bl	8005700 <USBD_SetClassConfig>
 8006318:	4603      	mov	r3, r0
 800631a:	2b02      	cmp	r3, #2
 800631c:	d104      	bne.n	8006328 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f931 	bl	8006588 <USBD_CtlError>
            return;
 8006326:	e052      	b.n	80063ce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f9d7 	bl	80066dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800632e:	e04e      	b.n	80063ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f9d3 	bl	80066dc <USBD_CtlSendStatus>
        break;
 8006336:	e04a      	b.n	80063ce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <USBD_SetConfig+0x118>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d112      	bne.n	8006366 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006348:	4b22      	ldr	r3, [pc, #136]	; (80063d4 <USBD_SetConfig+0x118>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006352:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <USBD_SetConfig+0x118>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff f9f0 	bl	800573e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9bc 	bl	80066dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006364:	e033      	b.n	80063ce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006366:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <USBD_SetConfig+0x118>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d01d      	beq.n	80063b0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff f9de 	bl	800573e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006382:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <USBD_SetConfig+0x118>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800638c:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <USBD_SetConfig+0x118>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff f9b4 	bl	8005700 <USBD_SetClassConfig>
 8006398:	4603      	mov	r3, r0
 800639a:	2b02      	cmp	r3, #2
 800639c:	d104      	bne.n	80063a8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f8f1 	bl	8006588 <USBD_CtlError>
            return;
 80063a6:	e012      	b.n	80063ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f997 	bl	80066dc <USBD_CtlSendStatus>
        break;
 80063ae:	e00e      	b.n	80063ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f993 	bl	80066dc <USBD_CtlSendStatus>
        break;
 80063b6:	e00a      	b.n	80063ce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8e4 	bl	8006588 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <USBD_SetConfig+0x118>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff f9b9 	bl	800573e <USBD_ClrClassConfig>
        break;
 80063cc:	bf00      	nop
    }
  }
}
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000188 	.word	0x20000188

080063d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	88db      	ldrh	r3, [r3, #6]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d004      	beq.n	80063f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f8cb 	bl	8006588 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80063f2:	e021      	b.n	8006438 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	db17      	blt.n	800642e <USBD_GetConfig+0x56>
 80063fe:	2b02      	cmp	r3, #2
 8006400:	dd02      	ble.n	8006408 <USBD_GetConfig+0x30>
 8006402:	2b03      	cmp	r3, #3
 8006404:	d00b      	beq.n	800641e <USBD_GetConfig+0x46>
 8006406:	e012      	b.n	800642e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3308      	adds	r3, #8
 8006412:	2201      	movs	r2, #1
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f920 	bl	800665c <USBD_CtlSendData>
        break;
 800641c:	e00c      	b.n	8006438 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	2201      	movs	r2, #1
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f918 	bl	800665c <USBD_CtlSendData>
        break;
 800642c:	e004      	b.n	8006438 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f8a9 	bl	8006588 <USBD_CtlError>
        break;
 8006436:	bf00      	nop
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006450:	3b01      	subs	r3, #1
 8006452:	2b02      	cmp	r3, #2
 8006454:	d81e      	bhi.n	8006494 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	88db      	ldrh	r3, [r3, #6]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d004      	beq.n	8006468 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f891 	bl	8006588 <USBD_CtlError>
        break;
 8006466:	e01a      	b.n	800649e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f043 0202 	orr.w	r2, r3, #2
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	330c      	adds	r3, #12
 8006488:	2202      	movs	r2, #2
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f8e5 	bl	800665c <USBD_CtlSendData>
      break;
 8006492:	e004      	b.n	800649e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f876 	bl	8006588 <USBD_CtlError>
      break;
 800649c:	bf00      	nop
  }
}
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	885b      	ldrh	r3, [r3, #2]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f90b 	bl	80066dc <USBD_CtlSendStatus>
  }
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064de:	3b01      	subs	r3, #1
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d80b      	bhi.n	80064fc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	885b      	ldrh	r3, [r3, #2]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10c      	bne.n	8006506 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f8f1 	bl	80066dc <USBD_CtlSendStatus>
      }
      break;
 80064fa:	e004      	b.n	8006506 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f842 	bl	8006588 <USBD_CtlError>
      break;
 8006504:	e000      	b.n	8006508 <USBD_ClrFeature+0x3a>
      break;
 8006506:	bf00      	nop
  }
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785a      	ldrb	r2, [r3, #1]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	3302      	adds	r3, #2
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	b29a      	uxth	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	3303      	adds	r3, #3
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	b29b      	uxth	r3, r3
 800653e:	4413      	add	r3, r2
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	3304      	adds	r3, #4
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	3305      	adds	r3, #5
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	b29b      	uxth	r3, r3
 800655a:	4413      	add	r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	3306      	adds	r3, #6
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b29a      	uxth	r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	3307      	adds	r3, #7
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	b29b      	uxth	r3, r3
 8006576:	4413      	add	r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	80da      	strh	r2, [r3, #6]

}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006592:	2180      	movs	r1, #128	; 0x80
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fb65 	bl	8006c64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb61 	bl	8006c64 <USBD_LL_StallEP>
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d032      	beq.n	8006626 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f834 	bl	800662e <USBD_GetLen>
 80065c6:	4603      	mov	r3, r0
 80065c8:	3301      	adds	r3, #1
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	75fa      	strb	r2, [r7, #23]
 80065da:	461a      	mov	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4413      	add	r3, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	75fa      	strb	r2, [r7, #23]
 80065ec:	461a      	mov	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	2203      	movs	r2, #3
 80065f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80065f6:	e012      	b.n	800661e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	60fa      	str	r2, [r7, #12]
 80065fe:	7dfa      	ldrb	r2, [r7, #23]
 8006600:	1c51      	adds	r1, r2, #1
 8006602:	75f9      	strb	r1, [r7, #23]
 8006604:	4611      	mov	r1, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	440a      	add	r2, r1
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	75fa      	strb	r2, [r7, #23]
 8006614:	461a      	mov	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4413      	add	r3, r2
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e8      	bne.n	80065f8 <USBD_GetString+0x4e>
    }
  }
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800663a:	e005      	b.n	8006648 <USBD_GetLen+0x1a>
  {
    len++;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	3301      	adds	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3301      	adds	r3, #1
 8006646:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f5      	bne.n	800663c <USBD_GetLen+0xe>
  }

  return len;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr

0800665c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	4613      	mov	r3, r2
 8006668:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2202      	movs	r2, #2
 800666e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800667e:	88fb      	ldrh	r3, [r7, #6]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	2100      	movs	r1, #0
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fb76 	bl	8006d76 <USBD_LL_Transmit>

  return USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	2100      	movs	r1, #0
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fb64 	bl	8006d76 <USBD_LL_Transmit>

  return USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	2100      	movs	r1, #0
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fb75 	bl	8006dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2204      	movs	r2, #4
 80066e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80066ec:	2300      	movs	r3, #0
 80066ee:	2200      	movs	r2, #0
 80066f0:	2100      	movs	r1, #0
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fb3f 	bl	8006d76 <USBD_LL_Transmit>

  return USBD_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2205      	movs	r2, #5
 800670e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006712:	2300      	movs	r3, #0
 8006714:	2200      	movs	r2, #0
 8006716:	2100      	movs	r1, #0
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb4f 	bl	8006dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800672c:	2200      	movs	r2, #0
 800672e:	490e      	ldr	r1, [pc, #56]	; (8006768 <MX_USB_DEVICE_Init+0x40>)
 8006730:	480e      	ldr	r0, [pc, #56]	; (800676c <MX_USB_DEVICE_Init+0x44>)
 8006732:	f7fe ff8b 	bl	800564c <USBD_Init>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800673c:	f7f9 fe60 	bl	8000400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006740:	490b      	ldr	r1, [pc, #44]	; (8006770 <MX_USB_DEVICE_Init+0x48>)
 8006742:	480a      	ldr	r0, [pc, #40]	; (800676c <MX_USB_DEVICE_Init+0x44>)
 8006744:	f7fe ffad 	bl	80056a2 <USBD_RegisterClass>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800674e:	f7f9 fe57 	bl	8000400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006752:	4806      	ldr	r0, [pc, #24]	; (800676c <MX_USB_DEVICE_Init+0x44>)
 8006754:	f7fe ffbe 	bl	80056d4 <USBD_Start>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800675e:	f7f9 fe4f 	bl	8000400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006762:	bf00      	nop
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000114 	.word	0x20000114
 800676c:	200001a4 	.word	0x200001a4
 8006770:	2000000c 	.word	0x2000000c

08006774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	6039      	str	r1, [r7, #0]
 800677e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2212      	movs	r2, #18
 8006784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006786:	4b03      	ldr	r3, [pc, #12]	; (8006794 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000130 	.word	0x20000130

08006798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2204      	movs	r2, #4
 80067a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000144 	.word	0x20000144

080067bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	6039      	str	r1, [r7, #0]
 80067c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4907      	ldr	r1, [pc, #28]	; (80067f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80067d2:	4808      	ldr	r0, [pc, #32]	; (80067f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80067d4:	f7ff fee9 	bl	80065aa <USBD_GetString>
 80067d8:	e004      	b.n	80067e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	4904      	ldr	r1, [pc, #16]	; (80067f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80067de:	4805      	ldr	r0, [pc, #20]	; (80067f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80067e0:	f7ff fee3 	bl	80065aa <USBD_GetString>
  }
  return USBD_StrDesc;
 80067e4:	4b02      	ldr	r3, [pc, #8]	; (80067f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000468 	.word	0x20000468
 80067f4:	08006f20 	.word	0x08006f20

080067f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	4904      	ldr	r1, [pc, #16]	; (8006818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006808:	4804      	ldr	r0, [pc, #16]	; (800681c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800680a:	f7ff fece 	bl	80065aa <USBD_GetString>
  return USBD_StrDesc;
 800680e:	4b02      	ldr	r3, [pc, #8]	; (8006818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000468 	.word	0x20000468
 800681c:	08006f38 	.word	0x08006f38

08006820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	6039      	str	r1, [r7, #0]
 800682a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	221a      	movs	r2, #26
 8006830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006832:	f000 f843 	bl	80068bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006836:	4b02      	ldr	r3, [pc, #8]	; (8006840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000148 	.word	0x20000148

08006844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	6039      	str	r1, [r7, #0]
 800684e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d105      	bne.n	8006862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	4907      	ldr	r1, [pc, #28]	; (8006878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800685a:	4808      	ldr	r0, [pc, #32]	; (800687c <USBD_FS_ConfigStrDescriptor+0x38>)
 800685c:	f7ff fea5 	bl	80065aa <USBD_GetString>
 8006860:	e004      	b.n	800686c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	4904      	ldr	r1, [pc, #16]	; (8006878 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006866:	4805      	ldr	r0, [pc, #20]	; (800687c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006868:	f7ff fe9f 	bl	80065aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800686c:	4b02      	ldr	r3, [pc, #8]	; (8006878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000468 	.word	0x20000468
 800687c:	08006f4c 	.word	0x08006f4c

08006880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	6039      	str	r1, [r7, #0]
 800688a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4907      	ldr	r1, [pc, #28]	; (80068b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006896:	4808      	ldr	r0, [pc, #32]	; (80068b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006898:	f7ff fe87 	bl	80065aa <USBD_GetString>
 800689c:	e004      	b.n	80068a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4904      	ldr	r1, [pc, #16]	; (80068b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068a2:	4805      	ldr	r0, [pc, #20]	; (80068b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068a4:	f7ff fe81 	bl	80065aa <USBD_GetString>
  }
  return USBD_StrDesc;
 80068a8:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000468 	.word	0x20000468
 80068b8:	08006f58 	.word	0x08006f58

080068bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <Get_SerialNum+0x44>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <Get_SerialNum+0x48>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068ce:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <Get_SerialNum+0x4c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068e2:	2208      	movs	r2, #8
 80068e4:	4909      	ldr	r1, [pc, #36]	; (800690c <Get_SerialNum+0x50>)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f814 	bl	8006914 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068ec:	2204      	movs	r2, #4
 80068ee:	4908      	ldr	r1, [pc, #32]	; (8006910 <Get_SerialNum+0x54>)
 80068f0:	68b8      	ldr	r0, [r7, #8]
 80068f2:	f000 f80f 	bl	8006914 <IntToUnicode>
  }
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	1ffff7e8 	.word	0x1ffff7e8
 8006904:	1ffff7ec 	.word	0x1ffff7ec
 8006908:	1ffff7f0 	.word	0x1ffff7f0
 800690c:	2000014a 	.word	0x2000014a
 8006910:	2000015a 	.word	0x2000015a

08006914 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
 800692a:	e027      	b.n	800697c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	0f1b      	lsrs	r3, r3, #28
 8006930:	2b09      	cmp	r3, #9
 8006932:	d80b      	bhi.n	800694c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	0f1b      	lsrs	r3, r3, #28
 8006938:	b2da      	uxtb	r2, r3
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4619      	mov	r1, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	440b      	add	r3, r1
 8006944:	3230      	adds	r2, #48	; 0x30
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e00a      	b.n	8006962 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	0f1b      	lsrs	r3, r3, #28
 8006950:	b2da      	uxtb	r2, r3
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	4619      	mov	r1, r3
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	440b      	add	r3, r1
 800695c:	3237      	adds	r2, #55	; 0x37
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	3301      	adds	r3, #1
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4413      	add	r3, r2
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	3301      	adds	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
 800697c:	7dfa      	ldrb	r2, [r7, #23]
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	429a      	cmp	r2, r3
 8006982:	d3d3      	bcc.n	800692c <IntToUnicode+0x18>
  }
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
	...

08006990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0d      	ldr	r2, [pc, #52]	; (80069d4 <HAL_PCD_MspInit+0x44>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d113      	bne.n	80069ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80069a2:	4b0d      	ldr	r3, [pc, #52]	; (80069d8 <HAL_PCD_MspInit+0x48>)
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	4a0c      	ldr	r2, [pc, #48]	; (80069d8 <HAL_PCD_MspInit+0x48>)
 80069a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069ac:	61d3      	str	r3, [r2, #28]
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <HAL_PCD_MspInit+0x48>)
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	2014      	movs	r0, #20
 80069c0:	f7f9 ff0d 	bl	80007de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80069c4:	2014      	movs	r0, #20
 80069c6:	f7f9 ff26 	bl	8000816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40005c00 	.word	0x40005c00
 80069d8:	40021000 	.word	0x40021000

080069dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7fe feb6 	bl	8005764 <USBD_LL_SetupStage>
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	440b      	add	r3, r1
 8006a20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f7fe fee6 	bl	80057fa <USBD_LL_DataOutStage>
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	440b      	add	r3, r1
 8006a56:	333c      	adds	r3, #60	; 0x3c
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f7fe ff3d 	bl	80058dc <USBD_LL_DataInStage>
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff f84d 	bl	8005b18 <USBD_LL_SOF>
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d001      	beq.n	8006a9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a9a:	f7f9 fcb1 	bl	8000400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006aa4:	7bfa      	ldrb	r2, [r7, #15]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fffd 	bl	8005aa8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe ffb6 	bl	8005a26 <USBD_LL_Reset>
}
 8006aba:	bf00      	nop
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fff7 	bl	8005ac6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <HAL_PCD_SuspendCallback+0x30>)
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	4a03      	ldr	r2, [pc, #12]	; (8006af4 <HAL_PCD_SuspendCallback+0x30>)
 8006ae6:	f043 0306 	orr.w	r3, r3, #6
 8006aea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	e000ed00 	.word	0xe000ed00

08006af8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fff1 	bl	8005aee <USBD_LL_Resume>
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006b1c:	4a1f      	ldr	r2, [pc, #124]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b2e:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <USBD_LL_Init+0x8c>)
 8006b30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006b32:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b34:	2208      	movs	r2, #8
 8006b36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006b38:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006b3e:	4b17      	ldr	r3, [pc, #92]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006b44:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006b4a:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006b50:	4812      	ldr	r0, [pc, #72]	; (8006b9c <USBD_LL_Init+0x88>)
 8006b52:	f7f9 ffec 	bl	8000b2e <HAL_PCD_Init>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006b5c:	f7f9 fc50 	bl	8000400 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b66:	2318      	movs	r3, #24
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	f7fb fc48 	bl	8002400 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b76:	2358      	movs	r3, #88	; 0x58
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2180      	movs	r1, #128	; 0x80
 8006b7c:	f7fb fc40 	bl	8002400 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2181      	movs	r1, #129	; 0x81
 8006b8e:	f7fb fc37 	bl	8002400 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000668 	.word	0x20000668
 8006ba0:	40005c00 	.word	0x40005c00

08006ba4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fa f8c2 	bl	8000d44 <HAL_PCD_Start>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f93c 	bl	8006e44 <USBD_Get_USB_Status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	4608      	mov	r0, r1
 8006be4:	4611      	mov	r1, r2
 8006be6:	461a      	mov	r2, r3
 8006be8:	4603      	mov	r3, r0
 8006bea:	70fb      	strb	r3, [r7, #3]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70bb      	strb	r3, [r7, #2]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c02:	78bb      	ldrb	r3, [r7, #2]
 8006c04:	883a      	ldrh	r2, [r7, #0]
 8006c06:	78f9      	ldrb	r1, [r7, #3]
 8006c08:	f7fa fa3c 	bl	8001084 <HAL_PCD_EP_Open>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f916 	bl	8006e44 <USBD_Get_USB_Status>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	4611      	mov	r1, r2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fa fa83 	bl	8001150 <HAL_PCD_EP_Close>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 f8f7 	bl	8006e44 <USBD_Get_USB_Status>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fa fb2c 	bl	80012e0 <HAL_PCD_EP_SetStall>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f8d8 	bl	8006e44 <USBD_Get_USB_Status>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cbc:	78fa      	ldrb	r2, [r7, #3]
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fa fb6d 	bl	80013a0 <HAL_PCD_EP_ClrStall>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 f8b9 	bl	8006e44 <USBD_Get_USB_Status>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	da0c      	bge.n	8006d16 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	440b      	add	r3, r1
 8006d10:	3302      	adds	r3, #2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	e00b      	b.n	8006d2e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d1c:	68f9      	ldr	r1, [r7, #12]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	440b      	add	r3, r1
 8006d28:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006d2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa f96f 	bl	800103a <HAL_PCD_SetAddress>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f86e 	bl	8006e44 <USBD_Get_USB_Status>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	461a      	mov	r2, r3
 8006d82:	460b      	mov	r3, r1
 8006d84:	72fb      	strb	r3, [r7, #11]
 8006d86:	4613      	mov	r3, r2
 8006d88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d98:	893b      	ldrh	r3, [r7, #8]
 8006d9a:	7af9      	ldrb	r1, [r7, #11]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	f7fa fa5c 	bl	800125a <HAL_PCD_EP_Transmit>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 f84b 	bl	8006e44 <USBD_Get_USB_Status>
 8006dae:	4603      	mov	r3, r0
 8006db0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006db2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	607a      	str	r2, [r7, #4]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	460b      	mov	r3, r1
 8006dca:	72fb      	strb	r3, [r7, #11]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dde:	893b      	ldrh	r3, [r7, #8]
 8006de0:	7af9      	ldrb	r1, [r7, #11]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	f7fa f9fc 	bl	80011e0 <HAL_PCD_EP_Receive>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f828 	bl	8006e44 <USBD_Get_USB_Status>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006df8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e0c:	4b02      	ldr	r3, [pc, #8]	; (8006e18 <USBD_static_malloc+0x14>)
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr
 8006e18:	2000018c 	.word	0x2000018c

08006e1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr

08006e2e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d817      	bhi.n	8006e88 <USBD_Get_USB_Status+0x44>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <USBD_Get_USB_Status+0x1c>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e77 	.word	0x08006e77
 8006e68:	08006e7d 	.word	0x08006e7d
 8006e6c:	08006e83 	.word	0x08006e83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
    break;
 8006e74:	e00b      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e76:	2302      	movs	r3, #2
 8006e78:	73fb      	strb	r3, [r7, #15]
    break;
 8006e7a:	e008      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e80:	e005      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e82:	2302      	movs	r3, #2
 8006e84:	73fb      	strb	r3, [r7, #15]
    break;
 8006e86:	e002      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8c:	bf00      	nop
  }
  return usb_status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop

08006e9c <__libc_init_array>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	2500      	movs	r5, #0
 8006ea0:	4e0c      	ldr	r6, [pc, #48]	; (8006ed4 <__libc_init_array+0x38>)
 8006ea2:	4c0d      	ldr	r4, [pc, #52]	; (8006ed8 <__libc_init_array+0x3c>)
 8006ea4:	1ba4      	subs	r4, r4, r6
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	42a5      	cmp	r5, r4
 8006eaa:	d109      	bne.n	8006ec0 <__libc_init_array+0x24>
 8006eac:	f000 f822 	bl	8006ef4 <_init>
 8006eb0:	2500      	movs	r5, #0
 8006eb2:	4e0a      	ldr	r6, [pc, #40]	; (8006edc <__libc_init_array+0x40>)
 8006eb4:	4c0a      	ldr	r4, [pc, #40]	; (8006ee0 <__libc_init_array+0x44>)
 8006eb6:	1ba4      	subs	r4, r4, r6
 8006eb8:	10a4      	asrs	r4, r4, #2
 8006eba:	42a5      	cmp	r5, r4
 8006ebc:	d105      	bne.n	8006eca <__libc_init_array+0x2e>
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ec4:	4798      	blx	r3
 8006ec6:	3501      	adds	r5, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__libc_init_array+0xc>
 8006eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ece:	4798      	blx	r3
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	e7f2      	b.n	8006eba <__libc_init_array+0x1e>
 8006ed4:	08006f78 	.word	0x08006f78
 8006ed8:	08006f78 	.word	0x08006f78
 8006edc:	08006f78 	.word	0x08006f78
 8006ee0:	08006f7c 	.word	0x08006f7c

08006ee4 <memset>:
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	4402      	add	r2, r0
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d100      	bne.n	8006eee <memset+0xa>
 8006eec:	4770      	bx	lr
 8006eee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef2:	e7f9      	b.n	8006ee8 <memset+0x4>

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
